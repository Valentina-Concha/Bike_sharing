{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "30c4dabb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting git+https://github.com/eskerda/pybikes.gitNote: you may need to restart the kernel to use updated packages.\n",
      "  Cloning https://github.com/eskerda/pybikes.git to c:\\users\\vale\\appdata\\local\\temp\\pip-req-build-0ejndeml\n",
      "  Resolved https://github.com/eskerda/pybikes.git to commit dfbe327dd98247afaeb1fa40ce74e19f870499f1\n",
      "Requirement already satisfied: requests>=2.20.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from pybikes==1.0) (2.27.1)\n",
      "Requirement already satisfied: lxml in c:\\programdata\\anaconda3\\lib\\site-packages (from pybikes==1.0) (4.8.0)\n",
      "Requirement already satisfied: shapely>=1.5.13 in c:\\programdata\\anaconda3\\lib\\site-packages (from pybikes==1.0) (2.0.6)\n",
      "Requirement already satisfied: future in c:\\programdata\\anaconda3\\lib\\site-packages (from pybikes==1.0) (0.18.2)\n",
      "Requirement already satisfied: charset-normalizer~=2.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests>=2.20.0->pybikes==1.0) (2.0.4)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests>=2.20.0->pybikes==1.0) (1.26.9)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests>=2.20.0->pybikes==1.0) (2021.10.8)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests>=2.20.0->pybikes==1.0) (3.3)\n",
      "Requirement already satisfied: numpy<3,>=1.14 in c:\\programdata\\anaconda3\\lib\\site-packages (from shapely>=1.5.13->pybikes==1.0) (1.21.5)\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  Running command git clone -q https://github.com/eskerda/pybikes.git 'C:\\Users\\VALE\\AppData\\Local\\Temp\\pip-req-build-0ejndeml'\n"
     ]
    }
   ],
   "source": [
    "pip install git+https://github.com/eskerda/pybikes.git"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "8c7b6bfd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'BikeSantiago', 'city': 'Santiago', 'country': 'CL', 'latitude': -33.45, 'longitude': -70.67, 'company': ['Tembici', 'PBSC Urban Solutions'], 'gbfs_href': 'https://santiago.publicbikesystem.net/ube/gbfs/v1/'}\n",
      "0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['P01 - Andrés Bello / Gral. Holley',\n",
       " 8,\n",
       " 21,\n",
       " -33.41934560623177,\n",
       " -70.60962486853592,\n",
       " 'P02 - Italia / Marín',\n",
       " 6,\n",
       " 5,\n",
       " -33.443928,\n",
       " -70.625648,\n",
       " 'P03 - Suecia / El Vergel',\n",
       " 9,\n",
       " 1,\n",
       " -33.432821,\n",
       " -70.603629,\n",
       " 'P04 - Costanera Center 1',\n",
       " 3,\n",
       " 38,\n",
       " -33.417172,\n",
       " -70.605496,\n",
       " 'P05 - Costanera Center 2',\n",
       " 6,\n",
       " 9,\n",
       " -33.418039392357535,\n",
       " -70.60339809097209]"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pybikes\n",
    "\n",
    "#Pedir bss de santiago\n",
    "capital_bikeshare = pybikes.get(\"bikesantiago\")\n",
    "\n",
    "print(capital_bikeshare.meta)\n",
    "\n",
    "print(len(capital_bikeshare.stations))\n",
    "\n",
    "capital_bikeshare.update()\n",
    "#rescatar info de 10 estaciones con ciclo for y que me lo guarde en una tabla\n",
    "lista_estacion0=[]\n",
    "lista_estacion1=[]\n",
    "lista_estacion2=[]\n",
    "lista_estacion3=[]\n",
    "lista_estacion4=[]\n",
    "for y in range(5):\n",
    "      lista_estacion0.append(capital_bikeshare.stations[y].name)\n",
    "      #print(capital_bikeshare.stations[y].name)\n",
    "      lista_estacion0.append(capital_bikeshare.stations[y].bikes)\n",
    "      #print(capital_bikeshare.stations[y].bikes)\n",
    "      lista_estacion0.append(capital_bikeshare.stations[y].free)\n",
    "      #print(capital_bikeshare.stations[y].free)\n",
    "      lista_estacion0.append(capital_bikeshare.stations[y].latitude)\n",
    "      #print(capital_bikeshare.stations[y].latitude)\n",
    "      lista_estacion0.append(capital_bikeshare.stations[y].longitude)\n",
    "      #print(capital_bikeshare.stations[y].longitude)\n",
    "#mostrar lo que guardo for\n",
    "lista_estacion0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5e6d2a2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'BikeSantiago', 'city': 'Santiago', 'country': 'CL', 'latitude': -33.45, 'longitude': -70.67, 'company': ['Tembici', 'PBSC Urban Solutions'], 'gbfs_href': 'https://santiago.publicbikesystem.net/ube/gbfs/v1/'}\n",
      "0\n",
      "P01 - Andrés Bello / Gral. Holley\n",
      "26\n",
      "3\n",
      "-33.41934560623177\n",
      "-70.60962486853592\n",
      "P02 - Italia / Marín\n",
      "1\n",
      "10\n",
      "-33.443928\n",
      "-70.625648\n",
      "P03 - Suecia / El Vergel\n",
      "10\n",
      "1\n",
      "-33.432821\n",
      "-70.603629\n",
      "P04 - Costanera Center 1\n",
      "20\n",
      "19\n",
      "-33.417172\n",
      "-70.605496\n",
      "P05 - Costanera Center 2\n",
      "5\n",
      "10\n",
      "-33.418039392357535\n",
      "-70.60339809097209\n",
      "P06 - Duoc (Antonio Varas)\n",
      "14\n",
      "1\n",
      "-33.4327067\n",
      "-70.6156677\n"
     ]
    }
   ],
   "source": [
    "import pybikes\n",
    "\n",
    "#Pedir bss de santiago\n",
    "capital_bikeshare = pybikes.get(\"bikesantiago\")\n",
    "\n",
    "print(capital_bikeshare.meta)\n",
    "\n",
    "print(len(capital_bikeshare.stations))\n",
    "\n",
    "capital_bikeshare.update()\n",
    "#rescatar info de 10 estaciones con ciclo for y que me lo guarde en una tabla\n",
    "lista_estacion0=[]\n",
    "lista_estacion1=[]\n",
    "lista_estacion2=[]\n",
    "lista_estacion3=[]\n",
    "lista_estacion4=[]\n",
    "for y in range(6):\n",
    "    print(capital_bikeshare.stations[y].name)\n",
    "    print(capital_bikeshare.stations[y].bikes)\n",
    "    print(capital_bikeshare.stations[y].free)\n",
    "    print(capital_bikeshare.stations[y].latitude)\n",
    "    print(capital_bikeshare.stations[y].longitude)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "id": "9fc86d71",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'BikeSantiago', 'city': 'Santiago', 'country': 'CL', 'latitude': -33.45, 'longitude': -70.67, 'company': ['Tembici', 'PBSC Urban Solutions'], 'gbfs_href': 'https://santiago.publicbikesystem.net/ube/gbfs/v1/'}\n",
      "0\n",
      "[-33.41934560623177, -33.443928, -33.432821, -33.417172, -33.418039392357535]\n",
      "[29, 11, 11, 41, 15]\n",
      "[<pybikes.gbfs.GbfsStation object at 0x00000174600CCB50>, <pybikes.gbfs.GbfsStation object at 0x00000174600CCB80>, <pybikes.gbfs.GbfsStation object at 0x000001745CC3F8E0>, <pybikes.gbfs.GbfsStation object at 0x000001745CC3F100>, <pybikes.gbfs.GbfsStation object at 0x000001745C8DBAF0>]\n",
      "{'uid': '4', 'renting': 1, 'returning': 1, 'last_updated': 1727549586, 'address': 'Italia 980, esquina NO con Marín', 'post_code': '1111', 'has_ebikes': True, 'ebikes': 0, 'normal_bikes': 8, 'payment': ['key', 'transitcard', 'creditcard', 'phone'], 'payment-terminal': True, 'altitude': None, 'slots': 11, 'rental_uris': {}}\n",
      "11\n",
      "Italia 980, esquina NO con Marín\n"
     ]
    }
   ],
   "source": [
    "import pybikes\n",
    "\n",
    "#Pedir bss de santiago\n",
    "capital_bikeshare = pybikes.get(\"bikesantiago\")\n",
    "#para ver toda la data con los links incluidos\n",
    "print(capital_bikeshare.meta)\n",
    "#llamar un dato especifico de la data con capital_bikeshare.stations\n",
    "print(len(capital_bikeshare.stations))\n",
    "\n",
    "capital_bikeshare.update()\n",
    "#rescatar info de 10 estaciones con ciclo for y que me lo guarde en una tabla\n",
    "lista_estacionlatitudes=[]\n",
    "for y in range(5):\n",
    "    lista_estacionlatitudes.append(capital_bikeshare.stations[y].latitude)\n",
    "  #print(capital_bikeshare.stations[y].latitude)\n",
    "print(lista_estacionlatitudes)\n",
    "\n",
    "lista_capacidad=[]\n",
    "for y in range(5):\n",
    "    lista_capacidad.append(capital_bikeshare.stations[y].extra[\"slots\"])\n",
    "print(lista_capacidad)\n",
    "\n",
    "lista_estacioncom=[]\n",
    "for y in range(5):\n",
    "    lista_estacioncom.append(capital_bikeshare.stations[y])\n",
    "  #print(capital_bikeshare.stations[y].latitude)\n",
    "print(lista_estacioncom)\n",
    "\n",
    "\n",
    "#mostrar lo que guardo for\n",
    "\n",
    "print(capital_bikeshare.stations[1].extra)\n",
    "print(capital_bikeshare.stations[1].extra['slots'])\n",
    "print(capital_bikeshare.stations[1].extra['address'])\n",
    "\n",
    "\n",
    "#print(capital_bikeshare.stations[1].groups)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "id": "60257e4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'BikeSantiago', 'city': 'Santiago', 'country': 'CL', 'latitude': -33.45, 'longitude': -70.67, 'company': ['Tembici', 'PBSC Urban Solutions'], 'gbfs_href': 'https://santiago.publicbikesystem.net/ube/gbfs/v1/'}\n",
      "0\n",
      "['P01 - Andrés Bello / Gral. Holley', 'P02 - Italia / Marín', 'P03 - Suecia / El Vergel', 'P04 - Costanera Center 1', 'P05 - Costanera Center 2', 'P06 - Duoc (Antonio Varas)', 'P08 - Metro Colón', 'P09 - Metro Francisco Bilbao', 'P10 - Metro Manuel Montt', 'P11 - Metro Parque Bustamante', 'P12 - Puente Pedro de Valdivia', 'P15 - Manuel Montt / Andrés Bello', 'P16 - Metro Salvador', 'P18 - Metro Tobalaba', 'P19 - Municipalidad Providencia', 'P20 - Nueva Los Leones', 'P21 - Patio Bellavista', 'P22 - Plaza Loreto Cousiño', 'P23 - Metro Inés de Suarez', 'P24 - Plaza Río De Janeiro', 'P25 - Bilbao / Ricardo Lyon', 'P26 - Mar del Plata / Ricardo Lyon', 'P27 - Ricardo Lyon / Lota', 'P28 - Ricardo Lyon / Pocuro', 'P29 - Santa Isabel /Ana Luisa Prats', 'P30 - Lo Contador', 'P32 - Valenzuela Castillo / Miguel Claro', 'P37 - Obispo Salas', 'P44 - Andres Bello / Padre Mariano', 'P49 - Fco Bilbao / Román Díaz', 'P52 - Holanda / Pocuro', 'P53 - Plaza Inés de Suarez', 'P55 - Pérez Valenzuela', 'S11 - Metro Toesca', 'S02 - Metro República', 'S16 - Teatro Municipal', 'S17 - San Isidro / Santa Isabel', 'S14 - Santa Isabel / Carmen', 'S12 - Barrio Lastarria', 'S23 - Portugal / Santa Victoria', 'V07 - Bicentenario', 'V34 - Mestizo', 'V35 - Municipalidad de Vitacura', 'V10 - Casa Costanera', 'V37 - Naciones Unidas', 'S09 - Santo Domingo / Morandé', 'S27 - Teatinos / Huérfanos', 'S19 - Palacio de La Moneda', 'S20 - Metro Santa Lucía', 'S01 - Agustinas / Manuel Rodríguez Norte', 'S03 - Teatinos / General Mackenna', 'S25 - Plaza de Armas', 'S05 - Metro Bellas Artes', 'S18 - Metro Santa Ana', 'S21 - Metro Quinta Normal', 'S24 - Plaza Yungay', 'S07 - Metro Los Héroes', 'S64 - República / Gorbea', 'S30 - San Pablo', 'I01 - Metro Hospitales', 'I04 - Molino', 'I06 - Mall Independencia', 'V40 - Paul Claudel', 'V02 - Alonso de Cordova', 'V43 - Plaza Lo Castillo', 'V06 - Vespucio / Vitacura', 'V05 - Americo Vespucio / Las Hualtatas', 'V30 - Los Laureles', 'S39 - Metro Parque Almagro', 'S46 - Metro ULA', 'N10 - Metro Plaza Egaña', 'N05 - Irarrazaval / Hamburgo', 'N01 - Irarrazaval / Agustin Vigorena', 'N12 - Plaza Nunoa', 'N07 - Jose Luis Araneda / Capitan Orella', 'N13 - Ricardo Lyon / Hernan Cortes', 'N11 - Metro Simon Bolivar', 'N06 - Metro Nunoa', 'N19 - Antonio Varas / Irarrázaval', 'N08 - Manuel Montt / Union Literaria', 'N04 - Hospital Carabineros', 'N03 - Club Nunoa', 'P31 - Estación Canal 13', \"N14 - Plaza Augusto D'Halmar\", 'V39 - Pedro Canisio', 'P36 - Carlos Antúnez / Barros Errázuriz', 'P46 - Román Díaz', 'N02 - José Pedro Alessandri / Irarrázaval', 'S13 - Universidad Católica', 'S044 - Plaza Manuel Rodríguez', 'P39 - Parque Balmaceda', 'P38 - Québec', 'P43 - Los Españoles', 'P47 - Ibis Providencia', 'P50 - Las Esculturas Oriente', 'P56 - Ambasciata', 'S34 - Parque de los Reyes', 'P59 - Los Estanques', 'P42 - Lota / Tobalaba', 'S32 - Gorbea', 'S37 - FAU', 'S40 - Erasmo Escala', 'S41 - Fanor Velasco', 'S45 - Cueto', 'S50 - Gral. Jofré', 'S54 - Plaza Ercilla', 'P58 - Unidad Vecinal Providencia', 'P45 - Eliodoro Yañez / Holanda', 'N15 - Dublé Almeyda', 'P57 - Galvarino Gallardo', 'P60 - Suecia / Carmen Sylva', 'S31- Argomedo / Portugal', 'S35 - José Miguel Carrera', 'LC001 - Barrio El Golf', 'LC002 - Hendaya', 'LC003 - Ómnium', 'LC004 - Plaza Valenzuela Llanos', 'LC005 - Corporación Cultural De Las Condes', 'LC006 - Parque Titanium', 'LC007 - Centro Cívico De Las Condes', 'LC008 - San Crescente', 'LC009 - Municipalidad De Las Condes', 'LC010 - Metro Manquehue - Norte', 'LC011 - Metro Hernando De Magallanes', 'LC012 - Metro Los Dominicos', 'LC013 - Rotonda Atenas', 'LC014 - Parque Araucano', 'LC015 - Isidora Goyenechea / El Bosque Norte', 'LC016 - Plaza Juan Pablo II', 'LC017 - Sánchez Fontecilla / Cristóbal Colón', 'LC018 - Fiscalía Local De Las Condes', 'LC019 - Metro Alcántara', 'LC020 - Manquehue Sur / Cristóbal Colón', 'LC022 - Tobalaba / Apoquindo', 'LC023 - Plaza Don Raúl Simón Bernal', 'LC024 - Américo Vespucio / Pdte Kennedy', 'LC025 - Noruega', 'LC026 - Alcántara / Vaticano', 'LC027 - IV Centenario / El Galeón', 'LC028 - Mar De Coral', 'LC029 - Málaga / Rapallo', 'LC030 - Martín de Zamora / Algeciras', 'LC031 - Presidente Errázuriz / Enrique Foster', 'LC032 - Padre Hurtado / Pdte Kennedy Lateral', 'LC033 - Vitacura / San Patricio', 'LC034 - Zurich', 'LC035 - Escuela Militar', 'LC036 - Las Condes / Valle Alegre', 'LC037 - Manquehue Sur / Isabel La Católica', 'LC038 - Plaza Brasilia', 'LC039 Tomás Moro / Apoquindo', 'LC040 - Manquehue Sur / Alonso de Camargo', 'LC041 - Gertrudis Echeñíque / Callao', 'LC042 - Padre Hurtado / Las Condes', 'LC044 - Lat. Kennedy / Gerónimo de Alderete', 'LC045 - Cristóbal Colón / Padre Hurtado', 'LC046 - Padre Hurtado / Gral. Blanche', 'LC047 - Apoquindo / Luiz Zegers', 'LC048 - Latadia / Américo Vespucio', 'LC049 - Presidente Riesco / Américo Vespucio', 'LC050 - IV Centenario / Apoquindo', 'LC051 - IV Centenario / Manuel Claro Vial', 'LC052 - IV Centenario / Alejandro Fleming', 'LC053 - Sebastián Elcano / Victor Rae', 'LC054 - Padre Hurtado / Bocaccio', 'LC055 - Mall Los Dominicos', 'LC056 - Imperial', 'LC057 - Paul Harris / Cristóbal Colón', 'LC058 - Plaza Horacio Rivarola', 'LC059 - Sánchez Fontecilla / I. La Católica', 'LC060 - Rotonda La Capitanía', 'LC061 - Apoquindo / Hans C Andersen', 'LC062 - Visviri', 'LC063 - Isabel La Católica / El Pillán', 'LC064 - Luis Rodríguez Velasco - Cnel Pereira', 'LC065 - Alsacia / Apoquindo', 'LC066 - Cerro Colorado / Rosario Norte', 'LC067 - Isidora Goyenechea / Carmencita', 'LC068 - Metro Manquehue - Sur', 'LC069 - Cristóbal Colón / Fuenteovejuna', 'LC070 - Alonso De Córdova Interior', 'LC071 - Burgos / Apoquindo', 'LC072 - Estadio Israelita', 'LC073 - Padre Hurtado / Camino El Alba', 'LC074 - Del Inca / Antonia Salas', 'LC075 - La Oración / Gerónimo De Alderete', 'LC076 - La Posada / San Antonio', 'LC077 - Mall Sport', 'LC078 - Libia / Av Las Condes', 'LC079 - Mallalil', 'LC080 - Manquehue Sur / Carlos Alvarado', 'LC081 - Padre Hurtado / Alejandro Fleming', 'LC082 - Plaza Domingo Bondi', 'LC083 - Padre Hurtado / Nueva Bilbao', 'LC084 - Presidente Errázuriz / Alcántara', 'LC085 - Plaza La Condordia', 'LC086 - Tomás Moro / Alejandro Fleming', 'LC087 - Hospital DIPRECA', 'LC088 - Cerro Colorado / Manquehue Norte', 'LC089 - Chesterton / Bocaccio', 'LC090 - Plaza República de Paraguay', 'LC091 - Las Tranqueras / Pinares', 'LC092 - Manquehue Sur / El Director', 'LC093 - Los Estandartes', 'LC094 - Sánchez Fontecilla / Martín De Zamora', 'LC096 - La Casona', 'IT001 - ITAU', 'P62 - El Cerro', 'P64 - Seminario / Ricardo Matte Pérez', 'P70 - Metro Santa isabel II', 'S57 - Beauchef', 'S58 - Domeyko / Av. España', 'P67 - Nva. Providencia', 'S80 - Nataniel cox / Miguel Olivares', 'P35 - Seminario / Marín', 'P41 - Pedro León Gallo / Julio Prado', 'P14 - Metro Baquedano 2', 'LC097 - Roger de Flor', 'N16 - Polideportivo de Ñuñoa', 'N17 - EMPART', 'LC098 - Cantagallo', 'P34 - Santa Victoria / Bustamante', 'N09 - Irarrázaval / Brown Sur', 'P51 - El Vergel / Luis Thayer Ojeda', 'N46 - Av. Irarrázaval / Suecia', 'P13 - Fidel Oteiza', 'N47 - Unimarc', 'LC100 - Estocolmo / Los Militares']\n",
      "[-33.41934560623177, -33.443928, -33.432821, -33.417172, -33.418039392357535, -33.4327067, -33.426507, -33.430764, -33.428673, -33.442627203427, -33.42235794129878, -33.427612, -33.43243454013404, -33.418576632407984, -33.432688, -33.419709, -33.4341698, -33.428376, -33.438569, -33.432371, -33.437704, -33.432433, -33.424001, -33.435326, -33.445328, -33.420188, -33.43549, -33.437437, -33.423521214382866, -33.4399119, -33.434255, -33.437214, -33.42520370523797, -33.452785, -33.448685, -33.440293, -33.450176, -33.4497559, -33.43795, -33.447, -33.401, -33.394, -33.398, -33.398, -33.40705698, -33.43662, -33.43979026, -33.442268, -33.44209559, -33.44173748, -33.433263, -33.4371178, -33.436449, -33.43812949, -33.4405423, -33.4391272, -33.44769526, -33.45354969, -33.43440048, -33.4178575, -33.41844854, -33.4248825, -33.40511346, -33.40200104, -33.40037538, -33.39909006, -33.4039829, -33.40310719, -33.45132971, -33.449216, -33.45261426, -33.45391222, -33.45538919, -33.45457462, -33.45252027, -33.44673291, -33.44624055, -33.45394803, -33.453496, -33.44799515, -33.45057329, -33.44851884, -33.428334, -33.4377669, -33.40023, -33.427396, -33.4336798, -33.4550031, -33.4406591, -33.45153, -33.435753, -33.436129, -33.421237, -33.42942, -33.419241, -33.4417157, -33.4292186, -33.435136, -33.421639, -33.451742, -33.441621, -33.44523, -33.445385, -33.432545, -33.445234, -33.456762, -33.429112, -33.429568, -33.453795, -33.428773, -33.426609, -33.449535, -33.4542853438419, -33.413801544849235, -33.41633538695514, -33.411497, -33.4008125, -33.4070468, -33.413638, -33.4155375, -33.417277240611966, -33.40549081857746, -33.40852352496088, -33.40832863543705, -33.40797489140219, -33.4179749, -33.40372745514259, -33.4140291, -33.42733804187964, -33.426175658941176, -33.40663036908143, -33.41581830575392, -33.41694682812556, -33.418268939793215, -33.4235780792372, -33.4059514, -33.4028914, -33.427321, -33.4146643, -33.3982757, -33.4208819, -33.4191612, -33.420735, -33.39028, -33.4112801, -33.4152724, -33.41323901088015, -33.3782835, -33.4251273, -33.3969404, -33.4084859, -33.420719, -33.4178783, -33.3944148, -33.3947611, -33.4165857, -33.409368, -33.41092, -33.4281661, -33.410646, -33.4088502, -33.4274516, -33.4244074, -33.4300871, -33.4007972, -33.4142511, -33.4145242, -33.4159931, -33.42100177730469, -33.4310329, -33.4136204, -33.41445, -33.4206399, -33.425092, -33.4134215, -33.4154148, -33.4021838, -33.41427590000001, -33.4088654, -33.41743, -33.406487, -33.4156454, -33.397738, -33.4058465, -33.4161112, -33.4012095, -33.3757793, -33.3707813, -33.3909611, -33.4292933, -33.4293688, -33.4236346, -33.419611, -33.4270011, -33.4203594, -33.4275939, -33.4255758, -33.4165843, -33.400607208311925, -33.4004881, -33.4179055, -33.3944466, -33.4127497, -33.408274, -33.4246794, -33.374901, -33.4042975, -33.4155224, -33.4399122, -33.4472914, -33.4575027, -33.456969, -33.4215834, -33.4489077, -33.444268, -33.441835, -33.437872, -33.416827, -33.466891, -33.459305, -33.373503, -33.446208, -33.455446, -33.431525, -33.454407, -33.426074, -33.448787, -33.403871]\n",
      "[-70.60962486853592, -70.625648, -70.603629, -70.605496, -70.60339809097209, -70.6156677, -70.591061, -70.586271, -70.619841, -70.63180210307577, -70.61449773354506, -70.622221, -70.62630283643722, -70.601339781629, -70.611354, -70.606181, -70.6344606, -70.594844, -70.60657, -70.593848, -70.603752, -70.606035, -70.608913, -70.60463, -70.617757, -70.618145, -70.619374, -70.627979, -70.61862420621684, -70.6197889, -70.599488, -70.611594, -70.61982353418296, -70.657654, -70.668177, -70.647084, -70.643055, -70.6414542, -70.641136, -70.635, -70.602, -70.6, -70.601, -70.598, -70.60117543, -70.654184, -70.65515488, -70.654792, -70.64435899, -70.65941155, -70.655903, -70.64951152, -70.644408, -70.65915942, -70.68000555, -70.6734505, -70.66129178, -70.66720605, -70.65666229, -70.65614462, -70.66366017, -70.65469891, -70.59719235, -70.59432238, -70.59274524, -70.58823913, -70.5861602, -70.58984846, -70.65060318, -70.672539, -70.57100594, -70.57601631, -70.58642596, -70.59325218, -70.60139537, -70.6025058, -70.57212174, -70.60567081, -70.608902, -70.61342239, -70.6098175, -70.58293104, -70.627312, -70.5780226, -70.577895, -70.613888, -70.6208233, -70.5983212, -70.6395632, -70.665631, -70.631313, -70.625881, -70.616921, -70.621264, -70.611813, -70.6180035, -70.66931029999999, -70.608705, -70.597324, -70.659621, -70.638411, -70.668044, -70.65931, -70.673192, -70.636777, -70.659876, -70.616957, -70.600625, -70.621735, -70.607261, -70.60608739999999, -70.635145, -70.66288852778817, -70.59253647645858, -70.59272831797007, -70.576974, -70.5551709, -70.5615226, -70.605777, -70.595691, -70.59541272226964, -70.5791676265988, -70.56696175034541, -70.5565240534757, -70.54575441113255, -70.5525521, -70.5734289534596, -70.602333, -70.57879243580396, -70.59060368235784, -70.57264295352265, -70.58955562468736, -70.56464568023173, -70.60118541119313, -70.58067407396899, -70.586164, -70.5620934, -70.584462, -70.5576141, -70.56019429999999, -70.5845528, -70.57765429999999, -70.592328, -70.54789199999999, -70.60241359999999, -70.6037396, -70.5840396369095, -70.5283718, -70.5636526, -70.5674702, -70.5520471, -70.5643838, -70.59109029999999, -70.54495949999999, -70.5606097, -70.5390291, -70.5419713, -70.573725, -70.57404129999999, -70.5866266, -70.56529230000001, -70.5425892, -70.54617619999999, -70.5698905, -70.5446053, -70.5399329, -70.5498078, -70.534176, -70.57056557813877, -70.58473169999999, -70.57035739999999, -70.58614620000002, -70.5401847, -70.55987999999999, -70.5796304, -70.59053209999999, -70.5754187, -70.5980594, -70.5670528, -70.546534, -70.5758919, -70.5878764, -70.550654, -70.54322979999999, -70.5768415, -70.55960879999999, -70.5097322, -70.5073122, -70.54205209999999, -70.553979, -70.56504509999999, -70.5379851, -70.568072, -70.5385538, -70.5883217, -70.5705392, -70.5541926, -70.5294698, -70.57041189321937, -70.5475081, -70.5813515, -70.5536266, -70.5662998, -70.5831105, -70.5922775, -70.5051811, -70.57380549999999, -70.6173189, -70.6300545, -70.6300212, -70.6639914, -70.669086, -70.6083191, -70.65328210000001, -70.629237, -70.622069, -70.632628, -70.602087, -70.588843, -70.622923, -70.518313, -70.630302, -70.591529, -70.598038, -70.600099, -70.613563, -70.598339, -70.565809]\n",
      "[29, 11, 11, 41, 15, 15, 23, 11, 17, 17, 15, 15, 27, 29, 19, 23, 23, 19, 15, 15, 15, 15, 29, 23, 15, 23, 15, 15, 11, 15, 15, 19, 11, 31, 15, 11, 27, 17, 11, 19, 17, 23, 15, 11, 35, 19, 17, 35, 15, 17, 16, 19, 19, 23, 19, 19, 7, 15, 15, 15, 15, 11, 15, 11, 15, 15, 15, 11, 35, 15, 23, 19, 15, 23, 15, 15, 11, 17, 15, 15, 15, 11, 15, 19, 11, 27, 11, 23, 23, 11, 15, 15, 11, 15, 17, 15, 23, 15, 15, 11, 15, 19, 11, 11, 15, 23, 11, 15, 11, 11, 11, 23, 11, 11, 11, 15, 11, 17, 11, 17, 11, 15, 15, 19, 15, 11, 17, 11, 11, 11, 11, 15, 11, 11, 11, 16, 11, 11, 11, 11, 9, 7, 11, 15, 15, 15, 7, 11, 19, 11, 11, 15, 11, 11, 11, 11, 11, 15, 29, 11, 15, 11, 11, 15, 11, 19, 7, 11, 15, 11, 11, 11, 15, 11, 15, 11, 19, 15, 15, 7, 7, 11, 15, 11, 7, 7, 7, 15, 11, 15, 15, 11, 11, 11, 11, 11, 11, 11, 19, 7, 15, 7, 11, 7, 7, 11, 11, 11, 15, 11, 23, 19, 27, 15, 17, 11, 19, 17, 15, 23, 7, 15, 15, 11, 15, 27, 15, 11]\n",
      "[13, 7, 9, 13, 1, 7, 22, 5, 4, 11, 3, 2, 9, 0, 8, 7, 22, 11, 11, 5, 12, 13, 23, 13, 14, 4, 7, 8, 1, 5, 4, 8, 8, 28, 11, 10, 19, 9, 8, 6, 2, 23, 14, 1, 10, 17, 14, 20, 11, 12, 4, 17, 13, 18, 7, 8, 3, 10, 7, 13, 13, 7, 2, 4, 2, 10, 5, 5, 15, 11, 15, 14, 11, 21, 14, 14, 3, 15, 14, 14, 15, 7, 5, 3, 3, 13, 5, 13, 15, 10, 6, 9, 4, 2, 4, 13, 15, 6, 4, 7, 12, 17, 8, 4, 11, 7, 2, 0, 10, 3, 3, 21, 10, 0, 1, 7, 5, 6, 6, 3, 5, 3, 3, 1, 5, 1, 14, 8, 3, 8, 1, 4, 6, 5, 8, 1, 3, 3, 8, 4, 7, 6, 5, 10, 4, 6, 2, 6, 8, 7, 4, 0, 1, 5, 8, 7, 5, 2, 15, 0, 7, 6, 3, 9, 5, 10, 3, 5, 5, 1, 1, 6, 4, 4, 7, 5, 11, 7, 0, 5, 5, 7, 5, 6, 3, 3, 4, 7, 6, 8, 11, 4, 7, 7, 7, 6, 8, 2, 10, 3, 6, 0, 9, 2, 0, 4, 9, 2, 12, 9, 6, 11, 7, 2, 17, 10, 11, 3, 13, 10, 4, 14, 11, 7, 15, 10, 13, 3]\n",
      "[16, 4, 1, 28, 13, 8, 1, 6, 13, 5, 12, 13, 18, 29, 10, 16, 1, 8, 4, 10, 3, 2, 5, 10, 0, 19, 8, 7, 10, 10, 11, 10, 3, 2, 4, 1, 8, 8, 3, 13, 15, 0, 1, 10, 24, 2, 3, 14, 3, 5, 12, 2, 4, 5, 12, 11, 4, 4, 6, 2, 2, 4, 13, 7, 13, 5, 9, 6, 19, 4, 8, 5, 4, 2, 1, 1, 8, 2, 1, 1, 0, 4, 9, 15, 8, 14, 6, 10, 7, 1, 8, 6, 7, 13, 13, 2, 8, 9, 11, 3, 2, 2, 3, 7, 4, 16, 8, 15, 1, 8, 8, 2, 1, 11, 10, 8, 6, 11, 5, 13, 6, 12, 12, 17, 10, 10, 2, 3, 8, 3, 10, 11, 5, 6, 3, 15, 8, 8, 3, 7, 2, 1, 6, 5, 11, 9, 3, 5, 11, 4, 7, 15, 10, 6, 3, 4, 6, 13, 14, 11, 8, 5, 8, 6, 6, 9, 4, 6, 10, 10, 10, 5, 11, 7, 8, 6, 8, 8, 15, 2, 2, 4, 10, 5, 4, 4, 3, 8, 4, 7, 4, 7, 4, 4, 4, 5, 3, 9, 9, 4, 9, 7, 2, 5, 7, 7, 2, 9, 3, 2, 17, 8, 20, 13, 0, 1, 8, 14, 2, 13, 3, 1, 3, 3, 0, 17, 2, 7]\n",
      "[0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1]\n",
      "[16, 4, 1, 28, 13, 8, 1, 6, 13, 5, 12, 13, 18, 29, 10, 16, 1, 8, 4, 10, 3, 2, 5, 10, 0, 19, 8, 7, 10, 10, 11, 10, 3, 2, 4, 1, 8, 8, 3, 13, 15, 0, 1, 10, 24, 2, 3, 14, 3, 5, 12, 2, 4, 5, 12, 11, 4, 4, 6, 2, 2, 4, 13, 7, 13, 5, 9, 6, 19, 4, 8, 5, 4, 2, 1, 1, 8, 2, 1, 1, 0, 4, 9, 15, 8, 14, 6, 10, 7, 1, 8, 6, 7, 13, 13, 2, 8, 9, 11, 3, 2, 2, 3, 7, 4, 16, 8, 15, 1, 8, 8, 2, 1, 11, 10, 8, 6, 11, 5, 13, 6, 12, 12, 17, 10, 10, 2, 3, 8, 3, 10, 11, 5, 6, 3, 15, 8, 8, 3, 7, 2, 1, 6, 5, 11, 9, 3, 5, 11, 4, 7, 15, 10, 6, 3, 4, 6, 13, 14, 11, 8, 5, 8, 6, 6, 9, 4, 6, 10, 10, 10, 5, 11, 7, 8, 6, 8, 8, 15, 2, 2, 4, 10, 5, 4, 4, 3, 8, 4, 7, 4, 7, 4, 4, 4, 5, 3, 9, 9, 4, 9, 7, 2, 5, 7, 7, 2, 9, 3, 2, 17, 8, 20, 13, 0, 1, 8, 14, 2, 13, 3, 1, 3, 3, 0, 17, 2, 7]\n",
      "                                         Estacion capacity Bikes Free  \\\n",
      "Estacion 0      P01 - Andrés Bello / Gral. Holley       29    13   16   \n",
      "Estacion 1                   P02 - Italia / Marín       11     7    4   \n",
      "Estacion 2               P03 - Suecia / El Vergel       11     9    1   \n",
      "Estacion 3               P04 - Costanera Center 1       41    13   28   \n",
      "Estacion 4               P05 - Costanera Center 2       15     1   13   \n",
      "...                                           ...      ...   ...  ...   \n",
      "Estacion 223  P51 - El Vergel / Luis Thayer Ojeda       11     7    3   \n",
      "Estacion 224       N46 - Av. Irarrázaval / Suecia       15    15    0   \n",
      "Estacion 225                   P13 - Fidel Oteiza       27    10   17   \n",
      "Estacion 226                        N47 - Unimarc       15    13    2   \n",
      "Estacion 227    LC100 - Estocolmo / Los Militares       11     3    7   \n",
      "\n",
      "                          Latitud            Longitud num_bikes_disabled  \\\n",
      "Estacion 0     -33.41934560623177  -70.60962486853592                  0   \n",
      "Estacion 1             -33.443928          -70.625648                  0   \n",
      "Estacion 2             -33.432821          -70.603629                  1   \n",
      "Estacion 3             -33.417172          -70.605496                  0   \n",
      "Estacion 4    -33.418039392357535  -70.60339809097209                  1   \n",
      "...                           ...                 ...                ...   \n",
      "Estacion 223           -33.431525          -70.598038                  1   \n",
      "Estacion 224           -33.454407          -70.600099                  0   \n",
      "Estacion 225           -33.426074          -70.613563                  0   \n",
      "Estacion 226           -33.448787          -70.598339                  0   \n",
      "Estacion 227           -33.403871          -70.565809                  1   \n",
      "\n",
      "             Fecha actual                 Hora actual  \n",
      "Estacion 0     2024-09-28  2024-09-28 16:10:25.209695  \n",
      "Estacion 1     2024-09-28  2024-09-28 16:10:25.209695  \n",
      "Estacion 2     2024-09-28  2024-09-28 16:10:25.209695  \n",
      "Estacion 3     2024-09-28  2024-09-28 16:10:25.209695  \n",
      "Estacion 4     2024-09-28  2024-09-28 16:10:25.209695  \n",
      "...                   ...                         ...  \n",
      "Estacion 223   2024-09-28  2024-09-28 16:10:25.209695  \n",
      "Estacion 224   2024-09-28  2024-09-28 16:10:25.209695  \n",
      "Estacion 225   2024-09-28  2024-09-28 16:10:25.209695  \n",
      "Estacion 226   2024-09-28  2024-09-28 16:10:25.209695  \n",
      "Estacion 227   2024-09-28  2024-09-28 16:10:25.209695  \n",
      "\n",
      "[228 rows x 9 columns]\n",
      "Index(['Estacion', 'capacity', 'Bikes', 'Free', 'Latitud', 'Longitud',\n",
      "       'num_bikes_disabled', 'Fecha actual', 'Hora actual'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import pybikes\n",
    "#para exportar la fecha actual de hoy\n",
    "from datetime import date\n",
    "from datetime import datetime\n",
    "\n",
    "\n",
    "#Pedir bss de santiago\n",
    "capital_bikeshare = pybikes.get(\"bikesantiago\")\n",
    "#llamar un dato especifico de la data con capital_bikeshare.stations\n",
    "print(capital_bikeshare.meta)\n",
    "#largo de estaciones?borrar\n",
    "print(len(capital_bikeshare.stations))\n",
    "\n",
    "capital_bikeshare.update()\n",
    "#rescatar info de 10 estaciones con ciclo for y que me lo guarde en una tabla\n",
    "#Rescato informacion de las estaciones de 5 estaciones\n",
    "lista_estaciones=[]\n",
    "for y in range(0,228):\n",
    "    lista_estaciones.append(capital_bikeshare.stations[y].name)\n",
    "  #print(capital_bikeshare.stations[y].latitude)\n",
    "print(lista_estaciones)\n",
    "#ESTA ES UNA FORMA PARA PEDIR ESTACIONES ESPECIFICAS NO CONSECUTIVAS\n",
    "#estaciones_especificas =[5,6,7,8,9,10,11,12,13,14]\n",
    "#lista_estaciones=[]\n",
    "#for y in estaciones_especificas:\n",
    "    #lista_estaciones.append(capital_bikeshare.stations[y].name)\n",
    "  #print(capital_bikeshare.stations[y].latitude)\n",
    "#print(lista_estaciones)\n",
    "\n",
    "#Rescato informacion de las latitudes de 5 estaciones\n",
    "lista_estacionlatitudes=[]\n",
    "#el rango indica la cantidad de datos que va a sacar de latitud en este caso, ej=latitud de 5 estaciones\n",
    "for y in range(0,228):\n",
    "    lista_estacionlatitudes.append(capital_bikeshare.stations[y].latitude)\n",
    "  #print(capital_bikeshare.stations[y].latitude)\n",
    "print(lista_estacionlatitudes)\n",
    "\n",
    "lista_longitudes=[]\n",
    "for y in range(0,228):\n",
    "    lista_longitudes.append(capital_bikeshare.stations[y].longitude)\n",
    "print(lista_longitudes)\n",
    "\n",
    "lista_capacidad=[]\n",
    "for y in range(0,228):\n",
    "    lista_capacidad.append(capital_bikeshare.stations[y].extra[\"slots\"])\n",
    "print(lista_capacidad)\n",
    "\n",
    "lista_bikes=[]\n",
    "for y in range(0,228):\n",
    "    lista_bikes.append(capital_bikeshare.stations[y].bikes)\n",
    "print(lista_bikes)\n",
    "\n",
    "lista_free=[]\n",
    "for y in range(0,228):\n",
    "    lista_free.append(capital_bikeshare.stations[y].free)\n",
    "print(lista_free)\n",
    "\n",
    "##Para obtener num_bikes_disabled suma de bikes+libres= 23+15=38   entonces Como Capacidad=41 -> num_bikes_disabled=Capacidad-(suma bikes+free)=41-38=3\n",
    "lista_bikes_disabled=[]\n",
    "for y in range(0,228):\n",
    "    lista_bikes_disabled.append(capital_bikeshare.stations[y].extra['slots']-(capital_bikeshare.stations[y].bikes+capital_bikeshare.stations[y].free))\n",
    "print(lista_bikes_disabled)\n",
    "#para obtener fecha actual\n",
    "lista_fechas = []\n",
    "for y in range(0,228):\n",
    "    lista_fechas.append(date.today())\n",
    "print(lista_free)\n",
    "#para obtener fecha y hora actual\n",
    "lista_horas = []\n",
    "for y in range(0,228):\n",
    "    lista_horas.append(datetime.now())\n",
    "\n",
    "\n",
    "#armar dataframe\n",
    "data_countries = {'Estacion': lista_estaciones,\n",
    "'capacity': lista_capacidad,\n",
    "'Bikes': lista_bikes,\n",
    "'Free': lista_free,\n",
    "'Latitud': lista_estacionlatitudes,\n",
    "'Longitud': lista_longitudes,\n",
    "'num_bikes_disabled': lista_bikes_disabled,\n",
    "'Fecha actual':lista_fechas,\n",
    "'Hora actual':lista_horas}\n",
    "\n",
    "indexes = [f'Estacion {i}' for i in range(0,228)]\n",
    "columns = ['Estacion', 'capacity', 'Bikes', 'Free','Latitud','Longitud','num_bikes_disabled','Fecha actual','Hora actual']\n",
    "\n",
    "df_data_countries = pd.DataFrame(data=data_countries, index=indexes, columns=columns, dtype=str)\n",
    "print(df_data_countries)\n",
    "print(df_data_countries.columns) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "fc3bf2dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Datos exportados a C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx en la hoja 'Base de datos fecha'\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from openpyxl import load_workbook\n",
    "\n",
    "# Definir el nombre del archivo\n",
    "file_name = 'C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx'\n",
    "\n",
    "# Crear el DataFrame (puedes usar tu propio DataFrame aquí)\n",
    "# df_data_countries = pd.DataFrame({\"Columna1\": [5, 6], \"Columna2\": [7, 8]})\n",
    "\n",
    "# Definir el nombre de la hoja donde vas a escribir\n",
    "sheet_name = 'Base de datos fecha'\n",
    "\n",
    "# Cargar el archivo de Excel existente\n",
    "book = load_workbook(file_name)\n",
    "if sheet_name in book.sheetnames:\n",
    "    # Cargar los datos existentes de la hoja especificada en un DataFrame\n",
    "    existing_df = pd.read_excel(file_name, sheet_name=sheet_name)\n",
    "    \n",
    "    # Eliminar cualquier columna completamente vacía, para que no se agreguen columnas como Unnamed: 1, 2..\n",
    "    existing_df = existing_df.dropna(axis=1, how='all')\n",
    "\n",
    "    # Agregar los nuevos datos al final del DataFrame existente\n",
    "    updated_df = pd.concat([existing_df, df_data_countries], ignore_index=True)\n",
    "    \n",
    "    # Guardar el DataFrame actualizado en la misma hoja, sobrescribiéndola\n",
    "    with pd.ExcelWriter(file_name, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:\n",
    "        updated_df.to_excel(writer, sheet_name=sheet_name, index=False)\n",
    "else:\n",
    "    # Si la hoja no existe, escribir el DataFrame desde cero\n",
    "    with pd.ExcelWriter(file_name, engine='openpyxl', mode='a') as writer:\n",
    "        df_data_countries.to_excel(writer, sheet_name=sheet_name, index=False)\n",
    "\n",
    "print(f\"Datos exportados a {file_name} en la hoja '{sheet_name}'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "69d7bc6f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'BikeSantiago', 'city': 'Santiago', 'country': 'CL', 'latitude': -33.45, 'longitude': -70.67, 'company': ['Tembici', 'PBSC Urban Solutions'], 'gbfs_href': 'https://santiago.publicbikesystem.net/ube/gbfs/v1/'}\n",
      "0\n",
      "['P01 - Andrés Bello / Gral. Holley', 'P02 - Italia / Marín', 'P03 - Suecia / El Vergel', 'P04 - Costanera Center 1', 'P05 - Costanera Center 2', 'P06 - Duoc (Antonio Varas)', 'P08 - Metro Colón', 'P09 - Metro Francisco Bilbao', 'P10 - Metro Manuel Montt', 'P11 - Metro Parque Bustamante', 'P12 - Puente Pedro de Valdivia', 'P15 - Manuel Montt / Andrés Bello', 'P16 - Metro Salvador', 'P18 - Metro Tobalaba', 'P19 - Municipalidad Providencia', 'P20 - Nueva Los Leones', 'P21 - Patio Bellavista', 'P22 - Plaza Loreto Cousiño', 'P23 - Metro Inés de Suarez', 'P24 - Plaza Río De Janeiro', 'P25 - Bilbao / Ricardo Lyon', 'P26 - Mar del Plata / Ricardo Lyon', 'P27 - Ricardo Lyon / Lota', 'P28 - Ricardo Lyon / Pocuro', 'P29 - Santa Isabel /Ana Luisa Prats', 'P30 - Lo Contador', 'P32 - Valenzuela Castillo / Miguel Claro', 'P37 - Obispo Salas', 'P44 - Andres Bello / Padre Mariano', 'P49 - Fco Bilbao / Román Díaz', 'P52 - Holanda / Pocuro', 'P53 - Plaza Inés de Suarez', 'P55 - Pérez Valenzuela', 'S11 - Metro Toesca', 'S02 - Metro República', 'S16 - Teatro Municipal', 'S17 - San Isidro / Santa Isabel', 'S14 - Santa Isabel / Carmen', 'S12 - Barrio Lastarria', 'S23 - Portugal / Santa Victoria', 'V07 - Bicentenario', 'V34 - Mestizo', 'V35 - Municipalidad de Vitacura', 'V10 - Casa Costanera', 'V37 - Naciones Unidas', 'S09 - Santo Domingo / Morandé', 'S27 - Teatinos / Huérfanos', 'S19 - Palacio de La Moneda', 'S20 - Metro Santa Lucía', 'S01 - Agustinas / Manuel Rodríguez Norte', 'S03 - Teatinos / General Mackenna', 'S25 - Plaza de Armas', 'S05 - Metro Bellas Artes', 'S18 - Metro Santa Ana', 'S21 - Metro Quinta Normal', 'S07 - Metro Los Héroes', 'S64 - República / Gorbea', 'S30 - San Pablo', 'I01 - Metro Hospitales', 'I04 - Molino', 'I06 - Mall Independencia', 'V40 - Paul Claudel', 'V02 - Alonso de Cordova', 'V43 - Plaza Lo Castillo', 'V06 - Vespucio / Vitacura', 'V05 - Americo Vespucio / Las Hualtatas', 'V30 - Los Laureles', 'S39 - Metro Parque Almagro', 'S46 - Metro ULA', 'N10 - Metro Plaza Egaña', 'N05 - Irarrazaval / Hamburgo', 'N01 - Irarrazaval / Agustin Vigorena', 'N12 - Plaza Nunoa', 'N07 - Jose Luis Araneda / Capitan Orella', 'N13 - Ricardo Lyon / Hernan Cortes', 'N11 - Metro Simon Bolivar', 'N06 - Metro Nunoa', 'N19 - Antonio Varas / Irarrázaval', 'N08 - Manuel Montt / Union Literaria', 'N04 - Hospital Carabineros', 'N03 - Club Nunoa', 'P31 - Estación Canal 13', \"N14 - Plaza Augusto D'Halmar\", 'V39 - Pedro Canisio', 'P36 - Carlos Antúnez / Barros Errázuriz', 'P46 - Román Díaz', 'N02 - José Pedro Alessandri / Irarrázaval', 'S13 - Universidad Católica', 'S044 - Plaza Manuel Rodríguez', 'P39 - Parque Balmaceda', 'P38 - Québec', 'P43 - Los Españoles', 'P47 - Ibis Providencia', 'P50 - Las Esculturas Oriente', 'P56 - Ambasciata', 'S34 - Parque de los Reyes', 'P59 - Los Estanques', 'P42 - Lota / Tobalaba', 'S32 - Gorbea', 'S37 - FAU', 'S40 - Erasmo Escala', 'S41 - Fanor Velasco', 'S45 - Cueto', 'S50 - Gral. Jofré', 'S54 - Plaza Ercilla', 'P58 - Unidad Vecinal Providencia', 'P45 - Eliodoro Yañez / Holanda', 'N15 - Dublé Almeyda', 'P57 - Galvarino Gallardo', 'P60 - Suecia / Carmen Sylva', 'S31- Argomedo / Portugal', 'S35 - José Miguel Carrera', 'LC001 - Barrio El Golf', 'LC002 - Hendaya', 'LC003 - Ómnium', 'LC004 - Plaza Valenzuela Llanos', 'LC005 - Corporación Cultural De Las Condes', 'LC006 - Parque Titanium', 'LC007 - Centro Cívico De Las Condes', 'LC008 - San Crescente', 'LC009 - Municipalidad De Las Condes', 'LC010 - Metro Manquehue - Norte', 'LC011 - Metro Hernando De Magallanes', 'LC012 - Metro Los Dominicos', 'LC013 - Rotonda Atenas', 'LC014 - Parque Araucano', 'LC015 - Isidora Goyenechea / El Bosque Norte', 'LC016 - Plaza Juan Pablo II', 'LC017 - Sánchez Fontecilla / Cristóbal Colón', 'LC018 - Fiscalía Local De Las Condes', 'LC019 - Metro Alcántara', 'LC020 - Manquehue Sur / Cristóbal Colón', 'LC022 - Tobalaba / Apoquindo', 'LC023 - Plaza Don Raúl Simón Bernal', 'LC024 - Américo Vespucio / Pdte Kennedy', 'LC025 - Noruega', 'LC026 - Alcántara / Vaticano', 'LC027 - IV Centenario / El Galeón', 'LC028 - Mar De Coral', 'LC029 - Málaga / Rapallo', 'LC030 - Martín de Zamora / Algeciras', 'LC031 - Presidente Errázuriz / Enrique Foster', 'LC032 - Padre Hurtado / Pdte Kennedy Lateral', 'LC033 - Vitacura / San Patricio', 'LC034 - Zurich', 'LC035 - Escuela Militar', 'LC036 - Las Condes / Valle Alegre', 'LC037 - Manquehue Sur / Isabel La Católica', 'LC038 - Plaza Brasilia', 'LC039 Tomás Moro / Apoquindo', 'LC040 - Manquehue Sur / Alonso de Camargo', 'LC041 - Gertrudis Echeñíque / Callao', 'LC042 - Padre Hurtado / Las Condes', 'LC044 - Lat. Kennedy / Gerónimo de Alderete', 'LC045 - Cristóbal Colón / Padre Hurtado', 'LC046 - Padre Hurtado / Gral. Blanche', 'LC047 - Apoquindo / Luiz Zegers', 'LC048 - Latadia / Américo Vespucio', 'LC049 - Presidente Riesco / Américo Vespucio', 'LC050 - IV Centenario / Apoquindo', 'LC051 - IV Centenario / Manuel Claro Vial', 'LC052 - IV Centenario / Alejandro Fleming', 'LC053 - Sebastián Elcano / Victor Rae', 'LC054 - Padre Hurtado / Bocaccio', 'LC055 - Mall Los Dominicos', 'LC056 - Imperial', 'LC057 - Paul Harris / Cristóbal Colón', 'LC058 - Plaza Horacio Rivarola', 'LC059 - Sánchez Fontecilla / I. La Católica', 'LC060 - Rotonda La Capitanía', 'LC061 - Apoquindo / Hans C Andersen', 'LC062 - Visviri', 'LC063 - Isabel La Católica / El Pillán', 'LC064 - Luis Rodríguez Velasco - Cnel Pereira', 'LC065 - Alsacia / Apoquindo', 'LC066 - Cerro Colorado / Rosario Norte', 'LC067 - Isidora Goyenechea / Carmencita', 'LC068 - Metro Manquehue - Sur', 'LC069 - Cristóbal Colón / Fuenteovejuna', 'LC070 - Alonso De Córdova Interior', 'LC071 - Burgos / Apoquindo', 'LC072 - Estadio Israelita', 'LC073 - Padre Hurtado / Camino El Alba', 'LC074 - Del Inca / Antonia Salas', 'LC075 - La Oración / Gerónimo De Alderete', 'LC076 - La Posada / San Antonio', 'LC077 - Mall Sport', 'LC078 - Libia / Av Las Condes', 'LC079 - Mallalil', 'LC080 - Manquehue Sur / Carlos Alvarado', 'LC081 - Padre Hurtado / Alejandro Fleming', 'LC082 - Plaza Domingo Bondi', 'LC083 - Padre Hurtado / Nueva Bilbao', 'LC084 - Presidente Errázuriz / Alcántara', 'LC085 - Plaza La Condordia', 'LC086 - Tomás Moro / Alejandro Fleming', 'LC087 - Hospital DIPRECA', 'LC088 - Cerro Colorado / Manquehue Norte', 'LC089 - Chesterton / Bocaccio', 'LC090 - Plaza República de Paraguay', 'LC091 - Las Tranqueras / Pinares', 'LC092 - Manquehue Sur / El Director', 'LC093 - Los Estandartes', 'LC094 - Sánchez Fontecilla / Martín De Zamora', 'LC096 - La Casona', 'IT001 - ITAU', 'P62 - El Cerro', 'P64 - Seminario / Ricardo Matte Pérez', 'P70 - Metro Santa isabel II', 'S57 - Beauchef', 'S58 - Domeyko / Av. España', 'P67 - Nva. Providencia', 'S80 - Nataniel cox / Miguel Olivares', 'P35 - Seminario / Marín', 'P41 - Pedro León Gallo / Julio Prado', 'P14 - Metro Baquedano 2', 'LC097 - Roger de Flor', 'N16 - Polideportivo de Ñuñoa', 'N17 - EMPART', 'LC098 - Cantagallo', 'P34 - Santa Victoria / Bustamante', 'N09 - Irarrázaval / Brown Sur', 'P51 - El Vergel / Luis Thayer Ojeda', 'N46 - Av. Irarrázaval / Suecia', 'P13 - Fidel Oteiza', 'N47 - Unimarc', 'LC100 - Estocolmo / Los Militares']\n",
      "[-33.41934560623177, -33.443928, -33.432821, -33.417172, -33.418039392357535, -33.4327067, -33.426507, -33.430764, -33.428673, -33.442627203427, -33.42235794129878, -33.427612, -33.43243454013404, -33.418576632407984, -33.432688, -33.419709, -33.4341698, -33.428376, -33.438569, -33.432371, -33.437704, -33.432433, -33.424001, -33.435326, -33.445328, -33.420188, -33.43549, -33.437437, -33.423521214382866, -33.4399119, -33.434255, -33.437214, -33.42520370523797, -33.452785, -33.448685, -33.440293, -33.450176, -33.4497559, -33.43795, -33.447, -33.401, -33.394, -33.398, -33.398, -33.40705698, -33.43662, -33.43979026, -33.442268, -33.44209559, -33.44173748, -33.433263, -33.4371178, -33.436449, -33.43812949, -33.4405423, -33.44769526, -33.45354969, -33.43440048, -33.4178575, -33.41844854, -33.4248825, -33.40511346, -33.40200104, -33.40037538, -33.39909006, -33.4039829, -33.40310719, -33.45132971, -33.449216, -33.45261426, -33.45391222, -33.45538919, -33.45457462, -33.45252027, -33.44673291, -33.44624055, -33.45394803, -33.453496, -33.44799515, -33.45057329, -33.44851884, -33.428334, -33.4377669, -33.40023, -33.427396, -33.4336798, -33.4550031, -33.4406591, -33.45153, -33.435753, -33.436129, -33.421237, -33.42942, -33.419241, -33.4417157, -33.4292186, -33.435136, -33.421639, -33.451742, -33.441621, -33.44523, -33.445385, -33.432545, -33.445234, -33.456762, -33.429112, -33.429568, -33.453795, -33.428773, -33.426609, -33.449535, -33.4542853438419, -33.413801544849235, -33.41633538695514, -33.411497, -33.4008125, -33.4070468, -33.413638, -33.4155375, -33.417277240611966, -33.40549081857746, -33.40852352496088, -33.40832863543705, -33.40797489140219, -33.4179749, -33.40372745514259, -33.4140291, -33.42733804187964, -33.426175658941176, -33.40663036908143, -33.41581830575392, -33.41694682812556, -33.418268939793215, -33.4235780792372, -33.4059514, -33.4028914, -33.427321, -33.4146643, -33.3982757, -33.4208819, -33.4191612, -33.420735, -33.39028, -33.4112801, -33.4152724, -33.41323901088015, -33.3782835, -33.4251273, -33.3969404, -33.4084859, -33.420719, -33.4178783, -33.3944148, -33.3947611, -33.4165857, -33.409368, -33.41092, -33.4281661, -33.410646, -33.4088502, -33.4274516, -33.4244074, -33.4300871, -33.4007972, -33.4142511, -33.4145242, -33.4159931, -33.42100177730469, -33.4310329, -33.4136204, -33.41445, -33.4206399, -33.425092, -33.4134215, -33.4154148, -33.4021838, -33.41427590000001, -33.4088654, -33.41743, -33.406487, -33.4156454, -33.397738, -33.4058465, -33.4161112, -33.4012095, -33.3757793, -33.3707813, -33.3909611, -33.4292933, -33.4293688, -33.4236346, -33.419611, -33.4270011, -33.4203594, -33.4275939, -33.4255758, -33.4165843, -33.400607208311925, -33.4004881, -33.4179055, -33.3944466, -33.4127497, -33.408274, -33.4246794, -33.374901, -33.4042975, -33.4155224, -33.4399122, -33.4472914, -33.4575027, -33.456969, -33.4215834, -33.4489077, -33.444268, -33.441835, -33.437872, -33.416827, -33.466891, -33.459305, -33.373503, -33.446208, -33.455446, -33.431525, -33.454407, -33.426074, -33.448787, -33.403871]\n",
      "[-70.60962486853592, -70.625648, -70.603629, -70.605496, -70.60339809097209, -70.6156677, -70.591061, -70.586271, -70.619841, -70.63180210307577, -70.61449773354506, -70.622221, -70.62630283643722, -70.601339781629, -70.611354, -70.606181, -70.6344606, -70.594844, -70.60657, -70.593848, -70.603752, -70.606035, -70.608913, -70.60463, -70.617757, -70.618145, -70.619374, -70.627979, -70.61862420621684, -70.6197889, -70.599488, -70.611594, -70.61982353418296, -70.657654, -70.668177, -70.647084, -70.643055, -70.6414542, -70.641136, -70.635, -70.602, -70.6, -70.601, -70.598, -70.60117543, -70.654184, -70.65515488, -70.654792, -70.64435899, -70.65941155, -70.655903, -70.64951152, -70.644408, -70.65915942, -70.68000555, -70.66129178, -70.66720605, -70.65666229, -70.65614462, -70.66366017, -70.65469891, -70.59719235, -70.59432238, -70.59274524, -70.58823913, -70.5861602, -70.58984846, -70.65060318, -70.672539, -70.57100594, -70.57601631, -70.58642596, -70.59325218, -70.60139537, -70.6025058, -70.57212174, -70.60567081, -70.608902, -70.61342239, -70.6098175, -70.58293104, -70.627312, -70.5780226, -70.577895, -70.613888, -70.6208233, -70.5983212, -70.6395632, -70.665631, -70.631313, -70.625881, -70.616921, -70.621264, -70.611813, -70.6180035, -70.66931029999999, -70.608705, -70.597324, -70.659621, -70.638411, -70.668044, -70.65931, -70.673192, -70.636777, -70.659876, -70.616957, -70.600625, -70.621735, -70.607261, -70.60608739999999, -70.635145, -70.66288852778817, -70.59253647645858, -70.59272831797007, -70.576974, -70.5551709, -70.5615226, -70.605777, -70.595691, -70.59541272226964, -70.5791676265988, -70.56696175034541, -70.5565240534757, -70.54575441113255, -70.5525521, -70.5734289534596, -70.602333, -70.57879243580396, -70.59060368235784, -70.57264295352265, -70.58955562468736, -70.56464568023173, -70.60118541119313, -70.58067407396899, -70.586164, -70.5620934, -70.584462, -70.5576141, -70.56019429999999, -70.5845528, -70.57765429999999, -70.592328, -70.54789199999999, -70.60241359999999, -70.6037396, -70.5840396369095, -70.5283718, -70.5636526, -70.5674702, -70.5520471, -70.5643838, -70.59109029999999, -70.54495949999999, -70.5606097, -70.5390291, -70.5419713, -70.573725, -70.57404129999999, -70.5866266, -70.56529230000001, -70.5425892, -70.54617619999999, -70.5698905, -70.5446053, -70.5399329, -70.5498078, -70.534176, -70.57056557813877, -70.58473169999999, -70.57035739999999, -70.58614620000002, -70.5401847, -70.55987999999999, -70.5796304, -70.59053209999999, -70.5754187, -70.5980594, -70.5670528, -70.546534, -70.5758919, -70.5878764, -70.550654, -70.54322979999999, -70.5768415, -70.55960879999999, -70.5097322, -70.5073122, -70.54205209999999, -70.553979, -70.56504509999999, -70.5379851, -70.568072, -70.5385538, -70.5883217, -70.5705392, -70.5541926, -70.5294698, -70.57041189321937, -70.5475081, -70.5813515, -70.5536266, -70.5662998, -70.5831105, -70.5922775, -70.5051811, -70.57380549999999, -70.6173189, -70.6300545, -70.6300212, -70.6639914, -70.669086, -70.6083191, -70.65328210000001, -70.629237, -70.622069, -70.632628, -70.602087, -70.588843, -70.622923, -70.518313, -70.630302, -70.591529, -70.598038, -70.600099, -70.613563, -70.598339, -70.565809]\n",
      "[29, 11, 11, 41, 15, 15, 23, 11, 17, 17, 15, 15, 27, 29, 19, 23, 23, 19, 15, 15, 15, 15, 29, 23, 15, 23, 15, 15, 11, 15, 15, 19, 11, 31, 15, 11, 27, 17, 11, 19, 17, 23, 15, 11, 35, 19, 17, 35, 15, 17, 16, 19, 19, 23, 19, 7, 15, 15, 15, 15, 11, 15, 11, 15, 15, 15, 11, 35, 15, 23, 19, 15, 23, 15, 15, 11, 17, 15, 15, 15, 11, 15, 19, 11, 27, 11, 23, 23, 11, 15, 15, 11, 15, 17, 15, 23, 15, 15, 11, 15, 19, 11, 11, 15, 23, 11, 15, 11, 11, 11, 23, 11, 11, 11, 15, 11, 17, 11, 17, 11, 15, 15, 19, 15, 11, 17, 11, 11, 11, 11, 15, 11, 11, 11, 16, 11, 11, 11, 11, 9, 7, 11, 15, 15, 15, 7, 11, 19, 11, 11, 15, 11, 11, 11, 11, 11, 15, 29, 11, 15, 11, 11, 15, 11, 19, 7, 11, 15, 11, 11, 11, 15, 11, 15, 11, 19, 15, 15, 7, 7, 11, 15, 11, 7, 7, 7, 15, 11, 15, 15, 11, 11, 11, 11, 11, 11, 11, 19, 7, 15, 7, 11, 7, 7, 11, 11, 11, 15, 11, 23, 19, 27, 15, 17, 11, 19, 17, 15, 23, 7, 15, 15, 11, 15, 27, 15, 11]\n",
      "[0, 10, 3, 4, 2, 8, 11, 1, 4, 9, 13, 8, 21, 9, 15, 3, 21, 9, 7, 10, 4, 8, 26, 15, 15, 17, 12, 8, 6, 14, 8, 14, 1, 24, 12, 9, 25, 13, 8, 9, 2, 1, 4, 4, 23, 6, 7, 33, 13, 8, 7, 12, 8, 3, 12, 3, 10, 5, 2, 10, 8, 2, 3, 8, 12, 9, 2, 24, 15, 17, 11, 14, 19, 11, 9, 2, 17, 13, 12, 11, 0, 6, 8, 5, 19, 11, 22, 21, 11, 11, 4, 4, 4, 3, 6, 19, 7, 1, 3, 14, 11, 5, 8, 15, 7, 4, 6, 9, 6, 8, 13, 0, 9, 6, 2, 2, 4, 3, 7, 5, 5, 6, 7, 3, 2, 6, 1, 2, 3, 7, 4, 5, 3, 0, 6, 1, 6, 3, 6, 0, 3, 8, 3, 7, 1, 1, 0, 9, 2, 9, 3, 8, 4, 6, 7, 7, 5, 15, 3, 7, 4, 5, 8, 6, 11, 2, 6, 7, 6, 1, 5, 5, 4, 4, 1, 3, 1, 2, 4, 6, 4, 5, 4, 3, 1, 1, 8, 7, 6, 11, 6, 4, 9, 2, 6, 9, 2, 3, 2, 2, 3, 8, 3, 4, 4, 6, 1, 14, 8, 16, 8, 18, 10, 11, 11, 12, 1, 10, 23, 2, 9, 9, 5, 12, 23, 12, 7]\n",
      "[29, 1, 8, 36, 13, 7, 12, 10, 13, 8, 2, 7, 5, 20, 4, 20, 2, 10, 8, 5, 11, 7, 3, 8, 0, 6, 3, 7, 5, 1, 7, 5, 10, 7, 3, 1, 2, 4, 3, 10, 15, 22, 11, 7, 12, 13, 10, 0, 1, 8, 9, 7, 11, 20, 7, 4, 5, 10, 13, 5, 2, 13, 8, 7, 3, 6, 9, 10, 0, 6, 8, 1, 4, 4, 6, 9, 0, 1, 3, 4, 11, 8, 10, 6, 8, 0, 1, 2, 0, 4, 11, 7, 11, 14, 9, 4, 8, 14, 8, 1, 7, 6, 3, 0, 16, 7, 9, 2, 5, 3, 10, 11, 2, 4, 13, 9, 13, 8, 10, 6, 10, 9, 12, 12, 9, 11, 10, 9, 8, 4, 11, 6, 8, 11, 10, 10, 5, 8, 5, 9, 4, 3, 12, 8, 14, 6, 11, 10, 9, 2, 12, 3, 7, 5, 4, 3, 10, 14, 8, 8, 7, 6, 7, 5, 8, 5, 5, 8, 5, 10, 6, 10, 7, 11, 8, 16, 14, 13, 3, 1, 7, 10, 7, 4, 6, 6, 7, 4, 9, 4, 5, 7, 2, 9, 5, 2, 9, 16, 4, 13, 4, 3, 4, 3, 7, 5, 10, 1, 3, 7, 11, 8, 5, 6, 0, 7, 16, 5, 0, 5, 6, 6, 6, 3, 3, 3, 4]\n",
      "[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]\n",
      "[29, 1, 8, 36, 13, 7, 12, 10, 13, 8, 2, 7, 5, 20, 4, 20, 2, 10, 8, 5, 11, 7, 3, 8, 0, 6, 3, 7, 5, 1, 7, 5, 10, 7, 3, 1, 2, 4, 3, 10, 15, 22, 11, 7, 12, 13, 10, 0, 1, 8, 9, 7, 11, 20, 7, 4, 5, 10, 13, 5, 2, 13, 8, 7, 3, 6, 9, 10, 0, 6, 8, 1, 4, 4, 6, 9, 0, 1, 3, 4, 11, 8, 10, 6, 8, 0, 1, 2, 0, 4, 11, 7, 11, 14, 9, 4, 8, 14, 8, 1, 7, 6, 3, 0, 16, 7, 9, 2, 5, 3, 10, 11, 2, 4, 13, 9, 13, 8, 10, 6, 10, 9, 12, 12, 9, 11, 10, 9, 8, 4, 11, 6, 8, 11, 10, 10, 5, 8, 5, 9, 4, 3, 12, 8, 14, 6, 11, 10, 9, 2, 12, 3, 7, 5, 4, 3, 10, 14, 8, 8, 7, 6, 7, 5, 8, 5, 5, 8, 5, 10, 6, 10, 7, 11, 8, 16, 14, 13, 3, 1, 7, 10, 7, 4, 6, 6, 7, 4, 9, 4, 5, 7, 2, 9, 5, 2, 9, 16, 4, 13, 4, 3, 4, 3, 7, 5, 10, 1, 3, 7, 11, 8, 5, 6, 0, 7, 16, 5, 0, 5, 6, 6, 6, 3, 3, 3, 4]\n",
      "                                         Estacion capacity Bikes Free  \\\n",
      "Estacion 0      P01 - Andrés Bello / Gral. Holley       29     0   29   \n",
      "Estacion 1                   P02 - Italia / Marín       11    10    1   \n",
      "Estacion 2               P03 - Suecia / El Vergel       11     3    8   \n",
      "Estacion 3               P04 - Costanera Center 1       41     4   36   \n",
      "Estacion 4               P05 - Costanera Center 2       15     2   13   \n",
      "...                                           ...      ...   ...  ...   \n",
      "Estacion 222  P51 - El Vergel / Luis Thayer Ojeda       11     5    6   \n",
      "Estacion 223       N46 - Av. Irarrázaval / Suecia       15    12    3   \n",
      "Estacion 224                   P13 - Fidel Oteiza       27    23    3   \n",
      "Estacion 225                        N47 - Unimarc       15    12    3   \n",
      "Estacion 226    LC100 - Estocolmo / Los Militares       11     7    4   \n",
      "\n",
      "                          Latitud            Longitud num_bikes_disabled  \\\n",
      "Estacion 0     -33.41934560623177  -70.60962486853592                  0   \n",
      "Estacion 1             -33.443928          -70.625648                  0   \n",
      "Estacion 2             -33.432821          -70.603629                  0   \n",
      "Estacion 3             -33.417172          -70.605496                  1   \n",
      "Estacion 4    -33.418039392357535  -70.60339809097209                  0   \n",
      "...                           ...                 ...                ...   \n",
      "Estacion 222           -33.431525          -70.598038                  0   \n",
      "Estacion 223           -33.454407          -70.600099                  0   \n",
      "Estacion 224           -33.426074          -70.613563                  1   \n",
      "Estacion 225           -33.448787          -70.598339                  0   \n",
      "Estacion 226           -33.403871          -70.565809                  0   \n",
      "\n",
      "             Fecha actual                 Hora actual  \n",
      "Estacion 0     2024-09-27  2024-09-27 10:12:16.491321  \n",
      "Estacion 1     2024-09-27  2024-09-27 10:12:16.491321  \n",
      "Estacion 2     2024-09-27  2024-09-27 10:12:16.491321  \n",
      "Estacion 3     2024-09-27  2024-09-27 10:12:16.491321  \n",
      "Estacion 4     2024-09-27  2024-09-27 10:12:16.491321  \n",
      "...                   ...                         ...  \n",
      "Estacion 222   2024-09-27  2024-09-27 10:12:16.491321  \n",
      "Estacion 223   2024-09-27  2024-09-27 10:12:16.491321  \n",
      "Estacion 224   2024-09-27  2024-09-27 10:12:16.491321  \n",
      "Estacion 225   2024-09-27  2024-09-27 10:12:16.491321  \n",
      "Estacion 226   2024-09-27  2024-09-27 10:12:16.491321  \n",
      "\n",
      "[227 rows x 9 columns]\n"
     ]
    }
   ],
   "source": [
    "#pandas es una biblioteca Python para manipular y analizar datos, especialmente archivos como Excel.\n",
    "import pandas as pd\n",
    "#openpyxl es una biblioteca que permite trabajar directamente con archivos Excel. Aquí se usa para cargar y actualizar el archivo existente.\n",
    "from openpyxl import load_workbook\n",
    "#para importar los datos de bicicletas de py\n",
    "#los datos que entrega en los links de la web son tipo json\n",
    "import pybikes\n",
    "#para exportar la fecha actual de hoy\n",
    "from datetime import date\n",
    "from datetime import datetime\n",
    "\n",
    "\n",
    "#Pedir bss de santiago\n",
    "capital_bikeshare = pybikes.get(\"bikesantiago\")\n",
    "#llamar un dato especifico de la data con capital_bikeshare.stations\n",
    "print(capital_bikeshare.meta)\n",
    "#largo de estaciones?borrar\n",
    "print(len(capital_bikeshare.stations))\n",
    "\n",
    "capital_bikeshare.update()\n",
    "#rescatar info de 10 estaciones con ciclo for y que me lo guarde en una tabla\n",
    "#Rescato informacion de las estaciones de 5 estaciones\n",
    "lista_estaciones=[]\n",
    "for y in range(0,227):\n",
    "    lista_estaciones.append(capital_bikeshare.stations[y].name)\n",
    "  #print(capital_bikeshare.stations[y].latitude)\n",
    "print(lista_estaciones)\n",
    "#ESTA ES UNA FORMA PARA PEDIR ESTACIONES ESPECIFICAS NO CONSECUTIVAS\n",
    "#estaciones_especificas =[5,6,7,8,9,10,11,12,13,14]\n",
    "#lista_estaciones=[]\n",
    "#for y in estaciones_especificas:\n",
    "    #lista_estaciones.append(capital_bikeshare.stations[y].name)\n",
    "  #print(capital_bikeshare.stations[y].latitude)\n",
    "#print(lista_estaciones)\n",
    "\n",
    "#Rescato informacion de las latitudes de 5 estaciones\n",
    "lista_estacionlatitudes=[]\n",
    "#el rango indica la cantidad de datos que va a sacar de latitud en este caso, ej=latitud de 5 estaciones\n",
    "for y in range(0,227):\n",
    "    lista_estacionlatitudes.append(capital_bikeshare.stations[y].latitude)\n",
    "  #print(capital_bikeshare.stations[y].latitude)\n",
    "print(lista_estacionlatitudes)\n",
    "\n",
    "lista_longitudes=[]\n",
    "for y in range(0,227):\n",
    "    lista_longitudes.append(capital_bikeshare.stations[y].longitude)\n",
    "print(lista_longitudes)\n",
    "\n",
    "lista_capacidad=[]\n",
    "for y in range(0,227):\n",
    "    lista_capacidad.append(capital_bikeshare.stations[y].extra[\"slots\"])\n",
    "print(lista_capacidad)\n",
    "\n",
    "lista_bikes=[]\n",
    "for y in range(0,227):\n",
    "    lista_bikes.append(capital_bikeshare.stations[y].bikes)\n",
    "print(lista_bikes)\n",
    "\n",
    "lista_free=[]\n",
    "for y in range(0,227):\n",
    "    lista_free.append(capital_bikeshare.stations[y].free)\n",
    "print(lista_free)\n",
    "\n",
    "##Para obtener num_bikes_disabled suma de bikes+libres= 23+15=38   entonces Como Capacidad=41 -> num_bikes_disabled=Capacidad-(suma bikes+free)=41-38=3\n",
    "lista_bikes_disabled=[]\n",
    "for y in range(0,227):\n",
    "    lista_bikes_disabled.append(capital_bikeshare.stations[y].extra['slots']-(capital_bikeshare.stations[y].bikes+capital_bikeshare.stations[y].free))\n",
    "print(lista_bikes_disabled)\n",
    "#para obtener fecha actual\n",
    "lista_fechas = []\n",
    "today = date.today()\n",
    "for y in range(0,227):\n",
    "    lista_fechas.append(date.today())\n",
    "print(lista_free)\n",
    "#para obtener fecha y hora actual\n",
    "lista_horas = []\n",
    "now = date.today()\n",
    "for y in range(0,227):\n",
    "    lista_horas.append(datetime.now())\n",
    "\n",
    "#lista_varianza = []\n",
    "#for y in range(0,224):\n",
    "#    lista_estaciones.append(capital_bikeshare.stations[y].name)\n",
    "#print(lista_estaciones)\n",
    "\n",
    "\n",
    "#armar dataframe\n",
    "data_countries = {'Estacion': lista_estaciones,\n",
    "'capacity': lista_capacidad,\n",
    "'Bikes': lista_bikes,\n",
    "'Free': lista_free,\n",
    "'Latitud': lista_estacionlatitudes,\n",
    "'Longitud': lista_longitudes,\n",
    "'num_bikes_disabled': lista_bikes_disabled,\n",
    "'Fecha actual':lista_fechas,\n",
    "'Hora actual':lista_horas}\n",
    "\n",
    "indexes = [f'Estacion {i}' for i in range(0,227)]\n",
    "columns = ['Estacion', 'capacity', 'Bikes', 'Free','Latitud','Longitud','num_bikes_disabled','Fecha actual','Hora actual']\n",
    "\n",
    "df_data_countries = pd.DataFrame(data=data_countries, index=indexes, columns=columns, dtype=str)\n",
    "\n",
    "print(df_data_countries)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "3455fa7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Datos exportados a C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx en la hoja 'bd227'\n"
     ]
    }
   ],
   "source": [
    "#ESTE CÓDIGO ES PARA GUARDAR LOS DATOS CON 227, 228 ESTACIONES EN EL EXCEL\n",
    "import pandas as pd\n",
    "from openpyxl import load_workbook\n",
    "\n",
    "# Definir el nombre del archivo\n",
    "file_name = 'C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx'\n",
    "\n",
    "# Crear el DataFrame (puedes usar tu propio DataFrame aquí)\n",
    "# df_data_countries = pd.DataFrame({\"Columna1\": [5, 6], \"Columna2\": [7, 8]})\n",
    "\n",
    "# Definir el nombre de la hoja donde vas a escribir\n",
    "sheet_name = 'bd227'\n",
    "\n",
    "# Cargar el archivo de Excel existente\n",
    "book = load_workbook(file_name)\n",
    "if sheet_name in book.sheetnames:\n",
    "    # Cargar los datos existentes de la hoja especificada en un DataFrame\n",
    "    existing_df = pd.read_excel(file_name, sheet_name=sheet_name)\n",
    "    \n",
    "    # Agregar los nuevos datos al final del DataFrame existente\n",
    "    updated_df = pd.concat([existing_df, df_data_countries], ignore_index=True)\n",
    "    \n",
    "    # Guardar el DataFrame actualizado en la misma hoja, sobrescribiéndola\n",
    "    with pd.ExcelWriter(file_name, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:\n",
    "        updated_df.to_excel(writer, sheet_name=sheet_name, index=False)\n",
    "else:\n",
    "    # Si la hoja no existe, escribir el DataFrame desde cero\n",
    "    with pd.ExcelWriter(file_name, engine='openpyxl', mode='a') as writer:\n",
    "        df_data_countries.to_excel(writer, sheet_name=sheet_name, index=False)\n",
    "\n",
    "print(f\"Datos exportados a {file_name} en la hoja '{sheet_name}'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "id": "53556e0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                 Estacion  capacity  Bikes  Free    Latitud  \\\n",
      "0       P01 - Andrés Bello / Gral. Holley        29     12    17 -33.419346   \n",
      "1                    P02 - Italia / Marín        11      7     4 -33.443928   \n",
      "2                P03 - Suecia / El Vergel        11      9     1 -33.432821   \n",
      "3                P04 - Costanera Center 1        41     15    26 -33.417172   \n",
      "4                P05 - Costanera Center 2        15      6     9 -33.418039   \n",
      "...                                   ...       ...    ...   ...        ...   \n",
      "1591  P51 - El Vergel / Luis Thayer Ojeda        11      7     3 -33.431525   \n",
      "1592       N46 - Av. Irarrázaval / Suecia        15     15     0 -33.454407   \n",
      "1593                   P13 - Fidel Oteiza        27     10    17 -33.426074   \n",
      "1594                        N47 - Unimarc        15     13     2 -33.448787   \n",
      "1595    LC100 - Estocolmo / Los Militares        11      3     7 -33.403871   \n",
      "\n",
      "       Longitud  num_bikes_disabled Fecha actual                 Hora actual  \n",
      "0    -70.609625                   0   2024-09-25  2024-09-25 19:35:22.791645  \n",
      "1    -70.625648                   0   2024-09-25  2024-09-25 19:35:22.791645  \n",
      "2    -70.603629                   1   2024-09-25  2024-09-25 19:35:22.791645  \n",
      "3    -70.605496                   0   2024-09-25  2024-09-25 19:35:22.791645  \n",
      "4    -70.603398                   0   2024-09-25  2024-09-25 19:35:22.791645  \n",
      "...         ...                 ...          ...                         ...  \n",
      "1591 -70.598038                   1   2024-09-28  2024-09-28 16:10:25.209695  \n",
      "1592 -70.600099                   0   2024-09-28  2024-09-28 16:10:25.209695  \n",
      "1593 -70.613563                   0   2024-09-28  2024-09-28 16:10:25.209695  \n",
      "1594 -70.598339                   0   2024-09-28  2024-09-28 16:10:25.209695  \n",
      "1595 -70.565809                   1   2024-09-28  2024-09-28 16:10:25.209695  \n",
      "\n",
      "[1596 rows x 9 columns]\n",
      "Varianza de 'Bikes' y 'Free' calculada y guardada en la hoja 'Varianza Bikes y Free'.\n",
      "                            Estacion  Varianza_Bikes  Varianza_Free\n",
      "0             I01 - Metro Hospitales       17.285714      14.952381\n",
      "1                       I04 - Molino       19.619048      19.619048\n",
      "2           I06 - Mall Independencia        8.476190       8.476190\n",
      "3                       IT001 - ITAU       17.809524      17.809524\n",
      "4             LC001 - Barrio El Golf        7.571429       7.571429\n",
      "..                               ...             ...            ...\n",
      "223  V35 - Municipalidad de Vitacura       17.952381      17.952381\n",
      "224            V37 - Naciones Unidas       23.571429      26.571429\n",
      "225              V39 - Pedro Canisio        3.619048       3.619048\n",
      "226               V40 - Paul Claudel        6.142857       6.142857\n",
      "227          V43 - Plaza Lo Castillo        5.809524       5.809524\n",
      "\n",
      "[228 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "#ESTA PARTE DEL CODIGO ES PARA CALCULAR LA VARIANZA DE BIKES Y FREE\n",
    "import pandas as pd\n",
    "#openpyxl es una biblioteca que permite trabajar directamente con archivos Excel. Aquí se usa para cargar y actualizar el archivo existente.\n",
    "from openpyxl import load_workbook\n",
    "#file_name y sheet_name son las variables donde se especifica el nombre del archivo de Excel y la hoja en la que están los datos\n",
    "# Cargar archivo de Excel existente\n",
    "file_name = 'C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx'\n",
    "sheet_name = 'Base de datos fecha'\n",
    "\n",
    "#pd.read_excel() se utiliza para leer el archivo de Excel y almacenar la información en un DataFrame de pandas (similar a una tabla de Excel).\n",
    "#df contiene toda la información de la hoja de Excel de \"Base de datos fecha\" (como estaciones, \"Bikes\", \"Free\", etc.)\n",
    "# Leer el archivo de Excel en un DataFrame\n",
    "df = pd.read_excel(file_name, sheet_name=sheet_name)\n",
    "print(df)\n",
    "\n",
    "#groupby('Estacion'): Agrupa los datos por la columna \"Estacion\". Es decir, calcula la varianza por cada estación de bicicletas.\n",
    "#['Bikes'].var(): Aplica la función de varianza a la columna \"Bikes\". Se calcula la varianza solo para las filas que corresponden a cada estación.\n",
    "#El mismo proceso se aplica a la columna \"Free\".\n",
    "#varianza_bikes: Contiene la varianza de \"Bikes\" para cada estación.\n",
    "#varianza_free: Contiene la varianza de \"Free\" para cada estación.\n",
    "\n",
    "# Calcular la varianza de las columnas \"Bikes\" y \"Free\"\n",
    "varianza_bikes = df.groupby('Estacion')['Bikes'].var()\n",
    "varianza_free = df.groupby('Estacion')['Free'].var()\n",
    "\n",
    "# Crear un nuevo DataFrame con las varianzas\n",
    "#Se crea un nuevo DataFrame llamado df_varianza con las varianzas de las columnas \"Bikes\" y \"Free\".\n",
    "#Se asignan dos nuevas columnas:\n",
    "#Varianza_Bikes: Contiene las varianzas de \"Bikes\".\n",
    "#Varianza_Free: Contiene las varianzas de \"Free\"\n",
    "\n",
    "df_varianza = pd.DataFrame({\n",
    "    'Varianza_Bikes': varianza_bikes,\n",
    "    'Varianza_Free': varianza_free\n",
    "})\n",
    "#reset_index() convierte el índice \"Estacion\" del groupby en una columna normal.\n",
    "#inplace=True asegura que los cambios se apliquen directamente a df_varianza.\n",
    "# Restablecer el índice para que las estaciones sean una columna normal\n",
    "df_varianza.reset_index(inplace=True)\n",
    "\n",
    "#load_workbook(file_name): Se carga el archivo de Excel existente.\n",
    "#pd.ExcelWriter(): Se usa para abrir el archivo en modo de escritura.\n",
    "#mode='a' significa que se está añadiendo información sin sobrescribir todo el archivo.\n",
    "#if_sheet_exists='replace' indica que, si la hoja \"Varianza Bikes y Free\" ya existe, será reemplazada por la nueva.\n",
    "#df_varianza.to_excel(): Escribe el DataFrame con las varianzas en una nueva hoja de Excel llamada 'Varianza Bikes y Free'.\n",
    "#index=False: Excluye el índice de pandas (que es un contador automático) al guardar los datos.\n",
    "# Escribir el resultado de las varianzas en una nueva hoja o agregar al archivo de Excel\n",
    "book = load_workbook(file_name)\n",
    "with pd.ExcelWriter(file_name, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:\n",
    "    df_varianza.to_excel(writer, sheet_name='Varianza Bikes y Free', index=False)\n",
    "\n",
    "print(f\"Varianza de 'Bikes' y 'Free' calculada y guardada en la hoja 'Varianza Bikes y Free'.\")\n",
    "print(df_varianza)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "119a2705",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estacion\n",
      "I01 - Metro Hospitales             25.583333\n",
      "I04 - Molino                       27.666667\n",
      "I06 - Mall Independencia            6.000000\n",
      "IT001 - ITAU                        4.000000\n",
      "LC001 - Barrio El Golf             11.583333\n",
      "                                     ...    \n",
      "V35 - Municipalidad de Vitacura     3.000000\n",
      "V37 - Naciones Unidas              34.250000\n",
      "V39 - Pedro Canisio                 6.916667\n",
      "V40 - Paul Claudel                  3.000000\n",
      "V43 - Plaza Lo Castillo             3.583333\n",
      "Name: Bikes, Length: 228, dtype: float64\n",
      "Varianzas exportadas a C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx en la hoja 'Varianzas por Estacion'\n"
     ]
    }
   ],
   "source": [
    "#CALCULAR SOLO VARIANZA DE ESTACIÓN BIKES, NO CALCULA LA VARIANZA DE FREE(ELIMINAAAR)\n",
    "import pandas as pd\n",
    "\n",
    "# Cargar el archivo Excel completo con los datos históricos de todas las estaciones\n",
    "file_name = 'C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx'\n",
    "sheet_name = 'Base de datos fecha'\n",
    "\n",
    "# Leer todos los datos del archivo Excel\n",
    "df = pd.read_excel(file_name, sheet_name=sheet_name)\n",
    "\n",
    "# Convertir la columna 'Bikes' a valores numéricos para poder calcular la varianza\n",
    "df['Bikes'] = pd.to_numeric(df['Bikes'], errors='coerce')\n",
    "\n",
    "# Agrupar por estación y calcular la varianza de la columna 'Bikes' para cada estación\n",
    "varianzas_por_estacion = df.groupby('Estacion')['Bikes'].var()\n",
    "\n",
    "# Mostrar las varianzas por estación\n",
    "print(varianzas_por_estacion)\n",
    "\n",
    "# Si quieres, puedes guardar las varianzas en un nuevo archivo de Excel o una nueva hoja en el mismo archivo\n",
    "with pd.ExcelWriter(file_name, engine='openpyxl', mode='a') as writer:\n",
    "    varianzas_por_estacion.to_excel(writer, sheet_name='Varianzas por Estacion')\n",
    "\n",
    "print(f\"Varianzas exportadas a {file_name} en la hoja 'Varianzas por Estacion'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "e4f6ba3a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Varianza de 'Bikes' y 'Free' calculada y guardada en la nueva hoja 'VarBikyFree 23'.\n"
     ]
    }
   ],
   "source": [
    "#Si necesito calcular las varianzas y asignarla a una hoja diferente CONSIDERANDO HORA DE CADA HOJA DESCARGADA\n",
    "import pandas as pd\n",
    "from openpyxl import load_workbook\n",
    "from datetime import date\n",
    "from datetime import datetime\n",
    "\n",
    "# Nombre del archivo y hoja original\n",
    "file_name = 'C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx'\n",
    "sheet_name = 'Base de datos fecha'\n",
    "\n",
    "# Leer el archivo de Excel en un DataFrame\n",
    "df = pd.read_excel(file_name, sheet_name=sheet_name)\n",
    "\n",
    "# Calcular la varianza de las columnas \"Bikes\" y \"Free\"\n",
    "varianza_bikes = df.groupby('Estacion')['Bikes'].var()\n",
    "varianza_free = df.groupby('Estacion')['Free'].var()\n",
    "\n",
    "# Crear un nuevo DataFrame con las varianzas\n",
    "df_varianza = pd.DataFrame({\n",
    "    'Varianza_Bikes': varianza_bikes,\n",
    "    'Varianza_Free': varianza_free\n",
    "})\n",
    "\n",
    "# Restablecer el índice para que las estaciones sean una columna normal\n",
    "df_varianza.reset_index(inplace=True)\n",
    "\n",
    "# Cargar el libro de Excel existente\n",
    "book = load_workbook(file_name)\n",
    "\n",
    "# Generar un nombre único para la nueva hoja, usando la fecha y hora actual\n",
    "#AÑO-MES-DÍA_HORA-MINUTO-SEGUNDO\"\n",
    "#timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n",
    "timestamp = datetime.now().strftime('%H')\n",
    "new_sheet_name = f'VarBikyFree {timestamp}'\n",
    "\n",
    "# Escribir el resultado de las varianzas en una nueva hoja\n",
    "with pd.ExcelWriter(file_name, engine='openpyxl', mode='a') as writer:\n",
    "    df_varianza.to_excel(writer, sheet_name=new_sheet_name, index=False)\n",
    "\n",
    "print(f\"Varianza de 'Bikes' y 'Free' calculada y guardada en la nueva hoja '{new_sheet_name}'.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "77527ff8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'BikeSantiago', 'city': 'Santiago', 'country': 'CL', 'latitude': -33.45, 'longitude': -70.67, 'company': ['Tembici', 'PBSC Urban Solutions'], 'gbfs_href': 'https://santiago.publicbikesystem.net/ube/gbfs/v1/'}\n",
      "0\n",
      "Estación: P01 - Andrés Bello / Gral. Holley, Grupos: ['Providencia']\n",
      "Estación: P02 - Italia / Marín, Grupos: ['Providencia']\n",
      "Estación: P03 - Suecia / El Vergel, Grupos: ['Providencia']\n",
      "Estación: P04 - Costanera Center 1, Grupos: ['Providencia']\n",
      "Estación: P05 - Costanera Center 2, Grupos: ['Providencia']\n",
      "Estación: P06 - Duoc (Antonio Varas), Grupos: ['Providencia']\n",
      "Estación: P08 - Metro Colón, Grupos: ['Providencia']\n",
      "Estación: P09 - Metro Francisco Bilbao, Grupos: ['Providencia']\n",
      "Estación: P10 - Metro Manuel Montt, Grupos: ['Providencia']\n",
      "Estación: P11 - Metro Parque Bustamante, Grupos: ['Providencia']\n",
      "Estación: P12 - Puente Pedro de Valdivia, Grupos: ['Providencia']\n",
      "Estación: P15 - Manuel Montt / Andrés Bello, Grupos: ['Providencia']\n",
      "Estación: P16 - Metro Salvador, Grupos: ['Providencia']\n",
      "Estación: P18 - Metro Tobalaba, Grupos: ['Providencia']\n",
      "Estación: P19 - Municipalidad Providencia, Grupos: ['Providencia']\n",
      "Estación: P20 - Nueva Los Leones, Grupos: ['Providencia']\n",
      "Estación: P21 - Patio Bellavista, Grupos: ['Providencia']\n",
      "Estación: P22 - Plaza Loreto Cousiño, Grupos: ['Providencia', 'PLAN DE ACCIÓN - PROYECTOS']\n",
      "Estación: P23 - Metro Inés de Suarez, Grupos: ['Providencia', 'PLAN DE ACCIÓN - PROYECTOS']\n",
      "Estación: P24 - Plaza Río De Janeiro, Grupos: ['Providencia']\n",
      "Estación: P25 - Bilbao / Ricardo Lyon, Grupos: ['Providencia']\n",
      "Estación: P26 - Mar del Plata / Ricardo Lyon, Grupos: ['Providencia']\n",
      "Estación: P27 - Ricardo Lyon / Lota, Grupos: ['Providencia']\n",
      "Estación: P28 - Ricardo Lyon / Pocuro, Grupos: ['Providencia']\n",
      "Estación: P29 - Santa Isabel /Ana Luisa Prats, Grupos: ['Providencia']\n",
      "Estación: P30 - Lo Contador, Grupos: ['Providencia']\n",
      "Estación: P32 - Valenzuela Castillo / Miguel Claro, Grupos: ['Providencia']\n",
      "Estación: P37 - Obispo Salas, Grupos: ['Providencia']\n",
      "Estación: P44 - Andres Bello / Padre Mariano, Grupos: ['Providencia']\n",
      "Estación: P49 - Fco Bilbao / Román Díaz, Grupos: ['Providencia']\n",
      "Estación: P52 - Holanda / Pocuro, Grupos: ['Providencia', 'PLAN DE ACCIÓN - PROYECTOS']\n",
      "Estación: P53 - Plaza Inés de Suarez, Grupos: ['Providencia', 'PLAN DE ACCIÓN - PROYECTOS']\n",
      "Estación: P55 - Pérez Valenzuela, Grupos: ['Providencia']\n",
      "Estación: S11 - Metro Toesca, Grupos: ['Santiago']\n",
      "Estación: S02 - Metro República, Grupos: ['Santiago']\n",
      "Estación: S16 - Teatro Municipal, Grupos: ['Santiago']\n",
      "Estación: S17 - San Isidro / Santa Isabel, Grupos: ['Santiago']\n",
      "Estación: S14 - Santa Isabel / Carmen, Grupos: ['Santiago']\n",
      "Estación: S12 - Barrio Lastarria, Grupos: ['Santiago']\n",
      "Estación: S23 - Portugal / Santa Victoria, Grupos: ['Santiago']\n",
      "Estación: V07 - Bicentenario, Grupos: ['Vitacura']\n",
      "Estación: V34 - Mestizo, Grupos: ['Vitacura']\n",
      "Estación: V35 - Municipalidad de Vitacura, Grupos: ['Vitacura']\n",
      "Estación: V10 - Casa Costanera, Grupos: ['Vitacura']\n",
      "Estación: V37 - Naciones Unidas, Grupos: ['Vitacura']\n",
      "Estación: S09 - Santo Domingo / Morandé, Grupos: ['Santiago']\n",
      "Estación: S27 - Teatinos / Huérfanos, Grupos: ['Santiago']\n",
      "Estación: S19 - Palacio de La Moneda, Grupos: ['Santiago']\n",
      "Estación: S20 - Metro Santa Lucía, Grupos: ['Santiago']\n",
      "Estación: S01 - Agustinas / Manuel Rodríguez Norte, Grupos: ['Santiago']\n",
      "Estación: S03 - Teatinos / General Mackenna, Grupos: ['Santiago']\n",
      "Estación: S25 - Plaza de Armas, Grupos: ['Santiago']\n",
      "Estación: S05 - Metro Bellas Artes, Grupos: ['Santiago']\n",
      "Estación: S18 - Metro Santa Ana, Grupos: ['Santiago']\n",
      "Estación: S21 - Metro Quinta Normal, Grupos: ['Santiago']\n",
      "Estación: S24 - Plaza Yungay, Grupos: ['Santiago']\n",
      "Estación: S07 - Metro Los Héroes, Grupos: ['Santiago']\n",
      "Estación: S64 - República / Gorbea, Grupos: ['Santiago', 'PLAN DE ACCIÓN - PROYECTOS']\n",
      "Estación: S30 - San Pablo, Grupos: ['Santiago']\n",
      "Estación: I01 - Metro Hospitales, Grupos: ['Independencia']\n",
      "Estación: I04 - Molino, Grupos: ['Independencia']\n",
      "Estación: I06 - Mall Independencia, Grupos: ['Independencia']\n",
      "Estación: V40 - Paul Claudel, Grupos: ['Vitacura']\n",
      "Estación: V02 - Alonso de Cordova, Grupos: ['Vitacura']\n",
      "Estación: V43 - Plaza Lo Castillo, Grupos: ['Vitacura']\n",
      "Estación: V06 - Vespucio / Vitacura, Grupos: ['Vitacura']\n",
      "Estación: V05 - Americo Vespucio / Las Hualtatas, Grupos: ['Vitacura']\n",
      "Estación: V30 - Los Laureles, Grupos: ['Vitacura']\n",
      "Estación: S39 - Metro Parque Almagro, Grupos: ['Santiago']\n",
      "Estación: S46 - Metro ULA, Grupos: ['Santiago']\n",
      "Estación: N10 - Metro Plaza Egaña, Grupos: ['Ñuñoa']\n",
      "Estación: N05 - Irarrazaval / Hamburgo, Grupos: ['Ñuñoa']\n",
      "Estación: N01 - Irarrazaval / Agustin Vigorena, Grupos: ['Ñuñoa']\n",
      "Estación: N12 - Plaza Nunoa, Grupos: ['Ñuñoa']\n",
      "Estación: N07 - Jose Luis Araneda / Capitan Orella, Grupos: ['Ñuñoa']\n",
      "Estación: N13 - Ricardo Lyon / Hernan Cortes, Grupos: ['Ñuñoa']\n",
      "Estación: N11 - Metro Simon Bolivar, Grupos: ['Ñuñoa']\n",
      "Estación: N06 - Metro Nunoa, Grupos: ['Ñuñoa']\n",
      "Estación: N19 - Antonio Varas / Irarrázaval, Grupos: ['Ñuñoa']\n",
      "Estación: N08 - Manuel Montt / Union Literaria, Grupos: ['Ñuñoa']\n",
      "Estación: N04 - Hospital Carabineros, Grupos: ['Ñuñoa']\n",
      "Estación: N03 - Club Nunoa, Grupos: ['Ñuñoa']\n",
      "Estación: P31 - Estación Canal 13, Grupos: ['Providencia']\n",
      "Estación: N14 - Plaza Augusto D'Halmar, Grupos: ['Ñuñoa']\n",
      "Estación: V39 - Pedro Canisio, Grupos: ['Vitacura']\n",
      "Estación: P36 - Carlos Antúnez / Barros Errázuriz, Grupos: ['Providencia']\n",
      "Estación: Teste - 271, Grupos: ['BASE']\n",
      "Estación: P46 - Román Díaz, Grupos: ['Providencia']\n",
      "Estación: N02 - José Pedro Alessandri / Irarrázaval, Grupos: ['Ñuñoa']\n",
      "Estación: S13 - Universidad Católica, Grupos: ['Santiago']\n",
      "Estación: S044 - Plaza Manuel Rodríguez, Grupos: ['Santiago']\n",
      "Estación: P39 - Parque Balmaceda, Grupos: ['Providencia']\n",
      "Estación: P38 - Québec, Grupos: ['Providencia']\n",
      "Estación: P43 - Los Españoles, Grupos: ['Providencia']\n",
      "Estación: P47 - Ibis Providencia, Grupos: ['Providencia']\n",
      "Estación: P50 - Las Esculturas Oriente, Grupos: ['Providencia']\n",
      "Estación: P56 - Ambasciata, Grupos: ['Providencia']\n",
      "Estación: S34 - Parque de los Reyes, Grupos: ['Santiago']\n",
      "Estación: P59 - Los Estanques, Grupos: ['Providencia']\n",
      "Estación: P42 - Lota / Tobalaba, Grupos: ['Providencia']\n",
      "Estación: S32 - Gorbea, Grupos: ['Santiago']\n",
      "Estación: S37 - FAU, Grupos: ['Santiago']\n",
      "Estación: S40 - Erasmo Escala, Grupos: ['Santiago']\n",
      "Estación: S41 - Fanor Velasco, Grupos: ['Santiago']\n",
      "Estación: S45 - Cueto, Grupos: ['Santiago']\n",
      "Estación: S50 - Gral. Jofré, Grupos: ['Santiago']\n",
      "Estación: S54 - Plaza Ercilla, Grupos: ['Santiago']\n",
      "Estación: P58 - Unidad Vecinal Providencia, Grupos: ['Providencia']\n",
      "Estación: P45 - Eliodoro Yañez / Holanda, Grupos: ['Providencia']\n",
      "Estación: N15 - Dublé Almeyda, Grupos: ['Ñuñoa']\n",
      "Estación: P57 - Galvarino Gallardo, Grupos: ['Providencia']\n",
      "Estación: P60 - Suecia / Carmen Sylva, Grupos: ['Providencia']\n",
      "Estación: S31- Argomedo / Portugal, Grupos: ['Santiago']\n",
      "Estación: S35 - José Miguel Carrera, Grupos: ['Santiago']\n",
      "Estación: LC001 - Barrio El Golf, Grupos: ['Las Condes']\n",
      "Estación: LC002 - Hendaya, Grupos: ['Las Condes']\n",
      "Estación: LC003 - Ómnium, Grupos: ['Las Condes']\n",
      "Estación: LC004 - Plaza Valenzuela Llanos, Grupos: ['Las Condes']\n",
      "Estación: LC005 - Corporación Cultural De Las Condes, Grupos: ['Las Condes']\n",
      "Estación: LC006 - Parque Titanium, Grupos: ['Las Condes']\n",
      "Estación: LC007 - Centro Cívico De Las Condes, Grupos: ['Las Condes']\n",
      "Estación: LC008 - San Crescente, Grupos: ['Las Condes']\n",
      "Estación: LC009 - Municipalidad De Las Condes, Grupos: ['Las Condes']\n",
      "Estación: LC010 - Metro Manquehue - Norte, Grupos: ['Las Condes']\n",
      "Estación: LC011 - Metro Hernando De Magallanes, Grupos: ['Las Condes']\n",
      "Estación: LC012 - Metro Los Dominicos, Grupos: ['Las Condes']\n",
      "Estación: LC013 - Rotonda Atenas, Grupos: ['Las Condes']\n",
      "Estación: LC014 - Parque Araucano, Grupos: ['Las Condes']\n",
      "Estación: LC015 - Isidora Goyenechea / El Bosque Norte, Grupos: ['Las Condes']\n",
      "Estación: LC016 - Plaza Juan Pablo II, Grupos: ['Las Condes']\n",
      "Estación: LC017 - Sánchez Fontecilla / Cristóbal Colón, Grupos: ['Las Condes']\n",
      "Estación: LC018 - Fiscalía Local De Las Condes, Grupos: ['Las Condes']\n",
      "Estación: LC019 - Metro Alcántara, Grupos: ['Las Condes']\n",
      "Estación: LC020 - Manquehue Sur / Cristóbal Colón, Grupos: ['Las Condes']\n",
      "Estación: LC022 - Tobalaba / Apoquindo, Grupos: ['Las Condes']\n",
      "Estación: LC023 - Plaza Don Raúl Simón Bernal, Grupos: ['Las Condes']\n",
      "Estación: LC024 - Américo Vespucio / Pdte Kennedy, Grupos: ['Las Condes']\n",
      "Estación: LC025 - Noruega, Grupos: ['Las Condes']\n",
      "Estación: LC026 - Alcántara / Vaticano, Grupos: ['Las Condes']\n",
      "Estación: LC027 - IV Centenario / El Galeón, Grupos: ['Las Condes']\n",
      "Estación: LC028 - Mar De Coral, Grupos: ['Las Condes']\n",
      "Estación: LC029 - Málaga / Rapallo, Grupos: ['Las Condes']\n",
      "Estación: LC030 - Martín de Zamora / Algeciras, Grupos: ['Las Condes']\n",
      "Estación: LC031 - Presidente Errázuriz / Enrique Foster, Grupos: ['Las Condes']\n",
      "Estación: LC032 - Padre Hurtado / Pdte Kennedy Lateral, Grupos: ['Las Condes']\n",
      "Estación: LC033 - Vitacura / San Patricio, Grupos: ['Las Condes']\n",
      "Estación: LC034 - Zurich, Grupos: ['Las Condes']\n",
      "Estación: LC035 - Escuela Militar, Grupos: ['Las Condes']\n",
      "Estación: LC036 - Las Condes / Valle Alegre, Grupos: ['Las Condes']\n",
      "Estación: LC037 - Manquehue Sur / Isabel La Católica, Grupos: ['Las Condes']\n",
      "Estación: LC038 - Plaza Brasilia, Grupos: ['Las Condes']\n",
      "Estación: LC039 Tomás Moro / Apoquindo, Grupos: ['Las Condes']\n",
      "Estación: LC040 - Manquehue Sur / Alonso de Camargo, Grupos: ['Las Condes']\n",
      "Estación: LC041 - Gertrudis Echeñíque / Callao, Grupos: ['Las Condes']\n",
      "Estación: LC042 - Padre Hurtado / Las Condes, Grupos: ['Las Condes']\n",
      "Estación: LC044 - Lat. Kennedy / Gerónimo de Alderete, Grupos: ['Las Condes']\n",
      "Estación: LC045 - Cristóbal Colón / Padre Hurtado, Grupos: ['Las Condes']\n",
      "Estación: LC046 - Padre Hurtado / Gral. Blanche, Grupos: ['Las Condes']\n",
      "Estación: LC047 - Apoquindo / Luiz Zegers, Grupos: ['Las Condes']\n",
      "Estación: LC048 - Latadia / Américo Vespucio, Grupos: ['Las Condes']\n",
      "Estación: LC049 - Presidente Riesco / Américo Vespucio, Grupos: ['Las Condes']\n",
      "Estación: LC050 - IV Centenario / Apoquindo, Grupos: ['Las Condes']\n",
      "Estación: LC051 - IV Centenario / Manuel Claro Vial, Grupos: ['Las Condes']\n",
      "Estación: LC052 - IV Centenario / Alejandro Fleming, Grupos: ['Las Condes']\n",
      "Estación: LC053 - Sebastián Elcano / Victor Rae, Grupos: ['Las Condes']\n",
      "Estación: LC054 - Padre Hurtado / Bocaccio, Grupos: ['Las Condes']\n",
      "Estación: LC055 - Mall Los Dominicos, Grupos: ['Las Condes']\n",
      "Estación: LC056 - Imperial, Grupos: ['Las Condes']\n",
      "Estación: LC057 - Paul Harris / Cristóbal Colón, Grupos: ['Las Condes']\n",
      "Estación: LC058 - Plaza Horacio Rivarola, Grupos: ['Las Condes']\n",
      "Estación: LC059 - Sánchez Fontecilla / I. La Católica, Grupos: ['Las Condes']\n",
      "Estación: LC060 - Rotonda La Capitanía, Grupos: ['Las Condes']\n",
      "Estación: LC061 - Apoquindo / Hans C Andersen, Grupos: ['Las Condes']\n",
      "Estación: LC062 - Visviri, Grupos: ['Las Condes']\n",
      "Estación: LC063 - Isabel La Católica / El Pillán, Grupos: ['Las Condes']\n",
      "Estación: LC064 - Luis Rodríguez Velasco - Cnel Pereira, Grupos: ['Las Condes']\n",
      "Estación: LC065 - Alsacia / Apoquindo, Grupos: ['Las Condes']\n",
      "Estación: LC066 - Cerro Colorado / Rosario Norte, Grupos: ['Las Condes']\n",
      "Estación: LC067 - Isidora Goyenechea / Carmencita, Grupos: ['Las Condes']\n",
      "Estación: LC068 - Metro Manquehue - Sur, Grupos: ['Las Condes']\n",
      "Estación: LC069 - Cristóbal Colón / Fuenteovejuna, Grupos: ['Las Condes']\n",
      "Estación: LC070 - Alonso De Córdova Interior, Grupos: ['Las Condes']\n",
      "Estación: LC071 - Burgos / Apoquindo, Grupos: ['Las Condes']\n",
      "Estación: LC072 - Estadio Israelita, Grupos: ['Las Condes']\n",
      "Estación: LC073 - Padre Hurtado / Camino El Alba, Grupos: ['Las Condes']\n",
      "Estación: LC074 - Del Inca / Antonia Salas, Grupos: ['Las Condes']\n",
      "Estación: LC075 - La Oración / Gerónimo De Alderete, Grupos: ['Las Condes']\n",
      "Estación: LC076 - La Posada / San Antonio, Grupos: ['Las Condes']\n",
      "Estación: LC077 - Mall Sport, Grupos: ['Las Condes']\n",
      "Estación: LC078 - Libia / Av Las Condes, Grupos: ['Las Condes']\n",
      "Estación: LC079 - Mallalil, Grupos: ['Las Condes']\n",
      "Estación: LC080 - Manquehue Sur / Carlos Alvarado, Grupos: ['Las Condes']\n",
      "Estación: LC081 - Padre Hurtado / Alejandro Fleming, Grupos: ['Las Condes']\n",
      "Estación: LC082 - Plaza Domingo Bondi, Grupos: ['Las Condes']\n",
      "Estación: LC083 - Padre Hurtado / Nueva Bilbao, Grupos: ['Las Condes']\n",
      "Estación: LC084 - Presidente Errázuriz / Alcántara, Grupos: ['Las Condes']\n",
      "Estación: LC085 - Plaza La Condordia, Grupos: ['Las Condes']\n",
      "Estación: LC086 - Tomás Moro / Alejandro Fleming, Grupos: ['Las Condes']\n",
      "Estación: LC087 - Hospital DIPRECA, Grupos: ['Las Condes']\n",
      "Estación: LC088 - Cerro Colorado / Manquehue Norte, Grupos: ['Las Condes']\n",
      "Estación: LC089 - Chesterton / Bocaccio, Grupos: ['Las Condes']\n",
      "Estación: LC090 - Plaza República de Paraguay, Grupos: ['Las Condes']\n",
      "Estación: LC091 - Las Tranqueras / Pinares, Grupos: ['Las Condes']\n",
      "Estación: LC092 - Manquehue Sur / El Director, Grupos: ['Las Condes']\n",
      "Estación: LC093 - Los Estandartes, Grupos: ['Las Condes']\n",
      "Estación: LC094 - Sánchez Fontecilla / Martín De Zamora, Grupos: ['Las Condes']\n",
      "Estación: LC096 - La Casona, Grupos: ['Las Condes']\n",
      "Estación: IT001 - ITAU, Grupos: ['Las Condes']\n",
      "Estación: P62 - El Cerro, Grupos: ['Providencia']\n",
      "Estación: P64 - Seminario / Ricardo Matte Pérez, Grupos: ['Providencia']\n",
      "Estación: P70 - Metro Santa isabel II, Grupos: ['Providencia']\n",
      "Estación: S57 - Beauchef, Grupos: ['Santiago']\n",
      "Estación: S58 - Domeyko / Av. España, Grupos: ['Santiago']\n",
      "Estación: P67 - Nva. Providencia, Grupos: ['Providencia']\n",
      "Estación: S80 - Nataniel cox / Miguel Olivares, Grupos: ['Santiago']\n",
      "Estación: P35 - Seminario / Marín, Grupos: ['Providencia']\n",
      "Estación: P41 - Pedro León Gallo / Julio Prado, Grupos: ['Providencia']\n",
      "Estación: P14 - Metro Baquedano 2, Grupos: ['Providencia']\n",
      "Estación: LC097 - Roger de Flor, Grupos: ['Las Condes']\n",
      "Estación: N16 - Polideportivo de Ñuñoa, Grupos: ['Ñuñoa']\n",
      "Estación: N17 - EMPART, Grupos: ['Ñuñoa']\n",
      "Estación: LC098 - Cantagallo, Grupos: ['Las Condes']\n",
      "Estación: P34 - Santa Victoria / Bustamante, Grupos: ['Providencia']\n",
      "Estación: N09 - Irarrázaval / Brown Sur, Grupos: ['Ñuñoa']\n",
      "Estación: P51 - El Vergel / Luis Thayer Ojeda, Grupos: ['Providencia']\n",
      "Estación: N46 - Av. Irarrázaval / Suecia, Grupos: ['Ñuñoa']\n",
      "Estación: P13 - Fidel Oteiza, Grupos: ['Providencia']\n",
      "Estación: N47 - Unimarc, Grupos: ['Ñuñoa']\n",
      "Estación: LC100 - Estocolmo / Los Militares, Grupos: ['Las Condes']\n"
     ]
    }
   ],
   "source": [
    "#pandas es una biblioteca Python para manipular y analizar datos, especialmente archivos como Excel.\n",
    "import pandas as pd\n",
    "#openpyxl es una biblioteca que permite trabajar directamente con archivos Excel. Aquí se usa para cargar y actualizar el archivo existente.\n",
    "from openpyxl import load_workbook\n",
    "#para importar los datos de bicicletas de py\n",
    "#los datos que entrega en los links de la web son tipo json\n",
    "import pybikes\n",
    "#para exportar la fecha actual de hoy\n",
    "from datetime import date\n",
    "from datetime import datetime\n",
    "\n",
    "\n",
    "#Pedir bss de santiago\n",
    "capital_bikeshare = pybikes.get(\"bikesantiago\")\n",
    "#llamar un dato especifico de la data con capital_bikeshare.stations\n",
    "print(capital_bikeshare.meta)\n",
    "#largo de estaciones?borrar\n",
    "print(len(capital_bikeshare.stations))\n",
    "\n",
    "capital_bikeshare.update()\n",
    "import requests\n",
    "import json\n",
    "\n",
    "# URL de la API\n",
    "url = 'https://santiago.publicbikesystem.net/customer/ube/gbfs/v1/en/station_information'\n",
    "\n",
    "# Hacer la solicitud GET\n",
    "response = requests.get(url)\n",
    "\n",
    "# Verificar si la solicitud fue exitosa\n",
    "if response.status_code == 200:\n",
    "    # Cargar el contenido de la respuesta en formato JSON\n",
    "    data = response.json()\n",
    "    \n",
    "    # Recorrer las estaciones y extraer el campo \"groups\"\n",
    "    stations = data.get('data', {}).get('stations', [])\n",
    "    \n",
    "    for station in stations:\n",
    "        name = station.get('name')\n",
    "        groups = station.get('groups', 'No group')\n",
    "        \n",
    "        # Mostrar la estación y sus grupos\n",
    "        print(f\"Estación: {name}, Grupos: {groups}\")\n",
    "else:\n",
    "    print(f\"Error en la solicitud: {response.status_code}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "5508caa3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'BikeSantiago', 'city': 'Santiago', 'country': 'CL', 'latitude': -33.45, 'longitude': -70.67, 'company': ['Tembici', 'PBSC Urban Solutions'], 'gbfs_href': 'https://santiago.publicbikesystem.net/ube/gbfs/v1/'}\n",
      "0\n",
      "                                Estación Grupo (Comuna)\n",
      "0      P01 - Andrés Bello / Gral. Holley    Providencia\n",
      "1                   P02 - Italia / Marín    Providencia\n",
      "2               P03 - Suecia / El Vergel    Providencia\n",
      "3               P04 - Costanera Center 1    Providencia\n",
      "4               P05 - Costanera Center 2    Providencia\n",
      "..                                   ...            ...\n",
      "224  P51 - El Vergel / Luis Thayer Ojeda    Providencia\n",
      "225       N46 - Av. Irarrázaval / Suecia          Ñuñoa\n",
      "226                   P13 - Fidel Oteiza    Providencia\n",
      "227                        N47 - Unimarc          Ñuñoa\n",
      "228    LC100 - Estocolmo / Los Militares     Las Condes\n",
      "\n",
      "[229 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "#pandas es una biblioteca Python para manipular y analizar datos, especialmente archivos como Excel.\n",
    "import pandas as pd\n",
    "#openpyxl es una biblioteca que permite trabajar directamente con archivos Excel. Aquí se usa para cargar y actualizar el archivo existente.\n",
    "from openpyxl import load_workbook\n",
    "#para importar los datos de bicicletas de py\n",
    "#los datos que entrega en los links de la web son tipo json\n",
    "import pybikes\n",
    "#para exportar la fecha actual de hoy\n",
    "from datetime import date\n",
    "from datetime import datetime\n",
    "\n",
    "\n",
    "#Pedir bss de santiago\n",
    "capital_bikeshare = pybikes.get(\"bikesantiago\")\n",
    "#llamar un dato especifico de la data con capital_bikeshare.stations\n",
    "print(capital_bikeshare.meta)\n",
    "#largo de estaciones?borrar\n",
    "print(len(capital_bikeshare.stations))\n",
    "import requests\n",
    "import pandas as pd\n",
    "\n",
    "# URL de la API\n",
    "url = 'https://santiago.publicbikesystem.net/customer/ube/gbfs/v1/en/station_information'\n",
    "\n",
    "# Hacer la solicitud GET\n",
    "response = requests.get(url)\n",
    "\n",
    "# Verificar si la solicitud fue exitosa\n",
    "if response.status_code == 200:\n",
    "    # Cargar el contenido de la respuesta en formato JSON\n",
    "    data = response.json()\n",
    "    \n",
    "    # Listas para almacenar las estaciones y sus respectivos groups\n",
    "    estaciones = []\n",
    "    grupos = []\n",
    "    \n",
    "    # Recorrer las estaciones y extraer los nombres de estaciones y los grupos (comunas)\n",
    "    stations = data.get('data', {}).get('stations', [])\n",
    "    \n",
    "    for station in stations:\n",
    "        station_name = station.get('name', 'Unknown Station')\n",
    "        groups = station.get('groups', [])\n",
    "        \n",
    "        # Añadir los nombres de estación y el primer grupo (si hay grupos)\n",
    "        estaciones.append(station_name)\n",
    "        \n",
    "        if groups:\n",
    "            grupos.append(groups[0])  # Toma el primer grupo si existe\n",
    "        else:\n",
    "            grupos.append('Sin grupo')  # En caso de que no tenga grupo, coloca 'Sin grupo'\n",
    "        \n",
    "    \n",
    "    # Crear el DataFrame\n",
    "    df = pd.DataFrame({\n",
    "        'Estación': estaciones,\n",
    "        'Grupo (Comuna)': grupos\n",
    "    })\n",
    "print(df)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "id": "b7e4e55f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Número total de estaciones descargadas: 229\n",
      "Número de estaciones en la información de estaciones: 229\n",
      "Número de estaciones en el estado de estaciones: 229\n",
      "                                Estación Grupo (Comuna)  Capacidad (Slots)  \\\n",
      "0      P01 - Andrés Bello / Gral. Holley    Providencia                 29   \n",
      "1                   P02 - Italia / Marín    Providencia                 11   \n",
      "2               P03 - Suecia / El Vergel    Providencia                 11   \n",
      "3               P04 - Costanera Center 1    Providencia                 41   \n",
      "4               P05 - Costanera Center 2    Providencia                 15   \n",
      "..                                   ...            ...                ...   \n",
      "224  P51 - El Vergel / Luis Thayer Ojeda    Providencia                 11   \n",
      "225       N46 - Av. Irarrázaval / Suecia          Ñuñoa                 15   \n",
      "226                   P13 - Fidel Oteiza    Providencia                 27   \n",
      "227                        N47 - Unimarc          Ñuñoa                 15   \n",
      "228    LC100 - Estocolmo / Los Militares     Las Condes                 11   \n",
      "\n",
      "       Latitud   Longitud  Bikes Disponibles  Free Disponibles  \\\n",
      "0   -33.419346 -70.609625                 13                16   \n",
      "1   -33.443928 -70.625648                  7                 4   \n",
      "2   -33.432821 -70.603629                  9                 1   \n",
      "3   -33.417172 -70.605496                 15                26   \n",
      "4   -33.418039 -70.603398                  1                13   \n",
      "..         ...        ...                ...               ...   \n",
      "224 -33.431525 -70.598038                  7                 3   \n",
      "225 -33.454407 -70.600099                 15                 0   \n",
      "226 -33.426074 -70.613563                 10                17   \n",
      "227 -33.448787 -70.598339                 13                 2   \n",
      "228 -33.403871 -70.565809                  3                 7   \n",
      "\n",
      "     Bikes Deshabilitadas  \n",
      "0                       0  \n",
      "1                       0  \n",
      "2                       1  \n",
      "3                       0  \n",
      "4                       1  \n",
      "..                    ...  \n",
      "224                     1  \n",
      "225                     0  \n",
      "226                     0  \n",
      "227                     0  \n",
      "228                     1  \n",
      "\n",
      "[229 rows x 8 columns]\n"
     ]
    }
   ],
   "source": [
    "#pandas es una biblioteca Python para manipular y analizar datos, especialmente archivos como Excel.\n",
    "import pandas as pd\n",
    "#openpyxl es una biblioteca que permite trabajar directamente con archivos Excel. Aquí se usa para cargar y actualizar el archivo existente.\n",
    "from openpyxl import load_workbook\n",
    "#para importar los datos de bicicletas de py\n",
    "#los datos que entrega en los links de la web son tipo json\n",
    "import pybikes\n",
    "#para exportar la fecha actual de hoy\n",
    "from datetime import date\n",
    "from datetime import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "\n",
    "# URL de la API de información de estaciones\n",
    "station_info_url = 'https://santiago.publicbikesystem.net/customer/ube/gbfs/v1/en/station_information'\n",
    "\n",
    "# URL de la API de estado de estaciones\n",
    "station_status_url = 'https://santiago.publicbikesystem.net/customer/ube/gbfs/v1/en/station_status'\n",
    "\n",
    "# Hacer las solicitudes GET\n",
    "station_info_response = requests.get(station_info_url)\n",
    "station_status_response = requests.get(station_status_url)\n",
    "\n",
    "# Verificar si ambas solicitudes fueron exitosas\n",
    "if station_info_response.status_code == 200 and station_status_response.status_code == 200:\n",
    "    # Cargar los datos de las respuestas en formato JSON\n",
    "    station_info_data = station_info_response.json()\n",
    "    station_status_data = station_status_response.json()\n",
    "    \n",
    "    # Listas para almacenar los datos\n",
    "    estaciones = []\n",
    "    grupos = []\n",
    "    capacidad = []\n",
    "    latitud = []\n",
    "    longitud = []\n",
    "    bikes = []\n",
    "    free = []\n",
    "    num_bikes_disabled = []\n",
    "\n",
    "    # Obtener información de estaciones\n",
    "    stations_info = station_info_data.get('data', {}).get('stations', [])\n",
    "    \n",
    "    for station in stations_info:\n",
    "        station_id = station.get('station_id', 'Unknown ID')\n",
    "        estaciones.append(station.get('name', 'Unknown Station'))\n",
    "        grupos.append(station.get('groups', ['Sin grupo'])[0])  # Si no hay grupo, colocar 'Sin grupo'\n",
    "        capacidad.append(station.get('capacity', 'Unknown Capacity'))\n",
    "        latitud.append(station.get('lat', 'Unknown Latitude'))\n",
    "        longitud.append(station.get('lon', 'Unknown Longitude'))\n",
    "    \n",
    "    # Obtener estado de estaciones\n",
    "    stations_status = station_status_data.get('data', {}).get('stations', [])\n",
    "    \n",
    "    # Crear un diccionario para relacionar 'station_id' con los datos de estado\n",
    "    status_dict = {station.get('station_id'): station for station in stations_status}\n",
    "    \n",
    "    for station in stations_info:\n",
    "        station_id = station.get('station_id', 'Unknown ID')\n",
    "        status = status_dict.get(station_id, {})\n",
    "        bikes.append(status.get('num_bikes_available', 'Unknown Bikes'))\n",
    "        free.append(status.get('num_docks_available', 'Unknown Free'))\n",
    "        num_bikes_disabled.append(status.get('num_bikes_disabled', 'Unknown Disabled'))\n",
    "    \n",
    "    # Crear el DataFrame final con todas las columnas necesarias\n",
    "    df = pd.DataFrame({\n",
    "        'Estación': estaciones,\n",
    "        'Grupo (Comuna)': grupos,\n",
    "        'Capacidad (Slots)': capacidad,\n",
    "        'Latitud': latitud,\n",
    "        'Longitud': longitud,\n",
    "        'Bikes Disponibles': bikes,\n",
    "        'Free Disponibles': free,\n",
    "        'Bikes Deshabilitadas': num_bikes_disabled\n",
    "    })\n",
    "\n",
    "    # Guardar el DataFrame en un archivo Excel\n",
    "    file_name = 'estaciones_con_info_y_estado.xlsx'\n",
    "    df.to_excel(file_name, index=False)\n",
    "\n",
    "    \n",
    "    # Mostrar en Python el número total de estaciones descargadas\n",
    "    total_estaciones = len(stations_info)\n",
    "    print(f\"Número total de estaciones descargadas: {total_estaciones}\")\n",
    "    \n",
    "    # Si quieres asegurarte de que se descargaron ambas listas de datos correctamente\n",
    "    print(f\"Número de estaciones en la información de estaciones: {len(stations_info)}\")\n",
    "    print(f\"Número de estaciones en el estado de estaciones: {len(stations_status)}\")\n",
    "\n",
    "else:\n",
    "    print(f\"Error en las solicitudes: {station_info_response.status_code}, {station_status_response.status_code}\")\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "id": "d2a82625",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Número total de estaciones descargadas: 229\n",
      "Número de estaciones en la información de estaciones: 229\n",
      "Número de estaciones en el estado de estaciones: 229\n",
      "                                Estacion       Comuna  Capacidad (Slots)  \\\n",
      "0      P01 - Andrés Bello / Gral. Holley  Providencia                 29   \n",
      "1                   P02 - Italia / Marín  Providencia                 11   \n",
      "2               P03 - Suecia / El Vergel  Providencia                 11   \n",
      "3               P04 - Costanera Center 1  Providencia                 41   \n",
      "4               P05 - Costanera Center 2  Providencia                 15   \n",
      "..                                   ...          ...                ...   \n",
      "224  P51 - El Vergel / Luis Thayer Ojeda  Providencia                 11   \n",
      "225       N46 - Av. Irarrázaval / Suecia        Ñuñoa                 15   \n",
      "226                   P13 - Fidel Oteiza  Providencia                 27   \n",
      "227                        N47 - Unimarc        Ñuñoa                 15   \n",
      "228    LC100 - Estocolmo / Los Militares   Las Condes                 11   \n",
      "\n",
      "       Latitud   Longitud  Bikes disponibles  Free  Bikes Deshabilitadas  \\\n",
      "0   -33.419346 -70.609625                 12    17                     0   \n",
      "1   -33.443928 -70.625648                  9     2                     0   \n",
      "2   -33.432821 -70.603629                 10     1                     0   \n",
      "3   -33.417172 -70.605496                 10    31                     0   \n",
      "4   -33.418039 -70.603398                  4    10                     1   \n",
      "..         ...        ...                ...   ...                   ...   \n",
      "224 -33.431525 -70.598038                  4     7                     0   \n",
      "225 -33.454407 -70.600099                 15     0                     0   \n",
      "226 -33.426074 -70.613563                 10    17                     0   \n",
      "227 -33.448787 -70.598339                 13     2                     0   \n",
      "228 -33.403871 -70.565809                  3     7                     1   \n",
      "\n",
      "          Fecha                       Hora  \n",
      "0    2024-09-28 2024-09-28 18:48:06.311022  \n",
      "1    2024-09-28 2024-09-28 18:48:06.311022  \n",
      "2    2024-09-28 2024-09-28 18:48:06.311022  \n",
      "3    2024-09-28 2024-09-28 18:48:06.311022  \n",
      "4    2024-09-28 2024-09-28 18:48:06.311022  \n",
      "..          ...                        ...  \n",
      "224  2024-09-28 2024-09-28 18:48:06.311022  \n",
      "225  2024-09-28 2024-09-28 18:48:06.311022  \n",
      "226  2024-09-28 2024-09-28 18:48:06.311022  \n",
      "227  2024-09-28 2024-09-28 18:48:06.311022  \n",
      "228  2024-09-28 2024-09-28 18:48:06.311022  \n",
      "\n",
      "[229 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "#NUEVOO CODIGO QUE AGREGA LA COLUMNA \n",
    "#pandas es una biblioteca Python para manipular y analizar datos sobre todo df, especialmente archivos como Excel.\n",
    "import pandas as pd\n",
    "#openpyxl es una biblioteca que permite trabajar directamente con archivos Excel. Aquí se usa para cargar y actualizar el archivo existente.\n",
    "from openpyxl import load_workbook\n",
    "#para importar los datos de bicicletas de py\n",
    "#los datos que entrega en los links de la web son tipo json\n",
    "import pybikes\n",
    "#para exportar la fecha actual de hoy\n",
    "from datetime import date\n",
    "from datetime import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "#import requests: Se importa la librería requests, que se utiliza para realizar peticiones HTTP en Python. Esto permite acceder a datos de APIs (interfaces de programación de aplicaciones) que suelen ofrecer información en formato JSON.\n",
    "import requests\n",
    "import pandas as pd\n",
    "from datetime import date, datetime\n",
    "\n",
    "#station_info_url: Esta variable almacena la URL que proporciona información sobre las estaciones de bicicletas, como nombre, capacidad y ubicación.\n",
    "#station_status_url: Esta variable almacena la URL que proporciona el estado actual de las estaciones, incluyendo la disponibilidad de bicicletas y espacios.\n",
    "# URL de la API de información de estaciones\n",
    "station_info_url = 'https://santiago.publicbikesystem.net/customer/ube/gbfs/v1/en/station_information'\n",
    "\n",
    "# URL de la API de estado de estaciones\n",
    "station_status_url = 'https://santiago.publicbikesystem.net/customer/ube/gbfs/v1/en/station_status'\n",
    "\n",
    "# Hacer las solicitudes GET\n",
    "#Se realizan dos solicitudes HTTP GET a las URLs definidas anteriormente. Estas solicitudes recuperan datos de las APIs.\n",
    "station_info_response = requests.get(station_info_url)\n",
    "station_status_response = requests.get(station_status_url)\n",
    "\n",
    "\n",
    "# Verificar si ambas solicitudes fueron exitosas. Aquí se comprueba si ambas solicitudes fueron exitosas (código de estado 200 significa que la solicitud fue exitosa)\n",
    "if station_info_response.status_code == 200 and station_status_response.status_code == 200:\n",
    "    #Cargar los datos de las respuestas en formato JSON. Si las solicitudes fueron exitosas, los datos se cargan en formato JSON a las variables correspondientes (station_info_data y station_status_data)\n",
    "    station_info_data = station_info_response.json()\n",
    "    station_status_data = station_status_response.json()\n",
    "    \n",
    "    # Listas para almacenar los datos. Se inicializan listas vacías para almacenar los datos de cada estación que se extraerán del JSON.\n",
    "    estaciones = []\n",
    "    grupos = []\n",
    "    capacidad = []\n",
    "    latitud = []\n",
    "    longitud = []\n",
    "    bikes = []\n",
    "    free = []\n",
    "    num_bikes_disabled = []\n",
    "    fechas = []  # Lista para almacenar la fecha\n",
    "    horas = []   # Lista para almacenar la hora\n",
    "\n",
    "    # Obtener la fecha y la hora actuales\n",
    "    fecha_actual = date.today()\n",
    "    hora_actual = datetime.now()\n",
    "\n",
    "    # Obtener información de estaciones\n",
    "    #stations_info: Extrae la información sobre las estaciones desde los datos JSON.\n",
    "    #Ciclo for: Itera sobre cada estación en stations_info para extraer los detalles.\n",
    "    #station.get('station_id', 'Unknown ID'): Intenta obtener el station_id. Si no está disponible, se asigna el valor 'Unknown ID'. Por esto puse \"Unknown\", es una forma de manejar posibles valores faltantes o no disponibles.\n",
    "    #Se obtienen otras propiedades de la estación (nombre, grupos, capacidad, latitud y longitud) de manera similar, utilizando valores por defecto en caso de que falten.\n",
    "    stations_info = station_info_data.get('data', {}).get('stations', [])\n",
    "    \n",
    "    for station in stations_info:\n",
    "        station_id = station.get('station_id', 'Unknown ID')\n",
    "        estaciones.append(station.get('name', 'Unknown Station'))\n",
    "        grupos.append(station.get('groups', ['Sin grupo'])[0])  # Si no hay grupo, colocar 'Sin grupo'\n",
    "        capacidad.append(station.get('capacity', 'Unknown Capacity'))\n",
    "        latitud.append(station.get('lat', 'Unknown Latitude'))\n",
    "        longitud.append(station.get('lon', 'Unknown Longitude'))\n",
    "        fechas.append(fecha_actual)  # Agregar la fecha a cada fila\n",
    "        horas.append(hora_actual)    # Agregar la hora a cada fila\n",
    "    \n",
    "    # Obtener estado de estaciones\n",
    "    #Se repite un proceso similar para el estado de las estaciones:\n",
    "    #stations_status: Extrae los datos de estado desde el JSON.\n",
    "    #status_dict: Se crea un diccionario que relaciona cada station_id con su estado.\n",
    "    #Luego se extraen datos sobre el número de bicicletas disponibles, espacios libres y bicicletas deshabilitadas, utilizando el mismo enfoque de valores por defecto.\n",
    "    stations_status = station_status_data.get('data', {}).get('stations', [])\n",
    "    \n",
    "    #Crear un diccionario para relacionar 'station_id' con los datos de estado\n",
    "    #Se repite un proceso similar para el estado de las estaciones:\n",
    "    #stations_status: Extrae los datos de estado desde el JSON.\n",
    "    #status_dict: Se crea un diccionario que relaciona cada station_id con su estado.\n",
    "    #Luego se extraen datos sobre el número de bicicletas disponibles, espacios libres y bicicletas deshabilitadas, utilizando el mismo enfoque de valores por defecto.\n",
    "    status_dict = {station.get('station_id'): station for station in stations_status}\n",
    "    \n",
    "    for station in stations_info:\n",
    "        station_id = station.get('station_id', 'Unknown ID')\n",
    "        status = status_dict.get(station_id, {})\n",
    "        bikes.append(status.get('num_bikes_available', 'Unknown Bikes'))\n",
    "        free.append(status.get('num_docks_available', 'Unknown Free'))\n",
    "        num_bikes_disabled.append(status.get('num_bikes_disabled', 'Unknown Disabled'))\n",
    "    \n",
    "    # Crear el DataFrame final con todas las columnas necesarias\n",
    "    df = pd.DataFrame({\n",
    "        'Estacion': estaciones,\n",
    "        'Comuna': grupos,\n",
    "        'Capacidad (Slots)': capacidad,\n",
    "        'Latitud': latitud,\n",
    "        'Longitud': longitud,\n",
    "        'Bikes disponibles': bikes,\n",
    "        'Free': free,\n",
    "        'Bikes Deshabilitadas': num_bikes_disabled,\n",
    "        'Fecha': fechas,  # Agregar la columna Fecha\n",
    "        'Hora': horas     # Agregar la columna Hora\n",
    "    })\n",
    "\n",
    "    # Guardar el DataFrame en un archivo Excel\n",
    "    file_name = 'estaciones_con_info_y_estado_con_fecha_hora.xlsx'\n",
    "    df.to_excel(file_name, index=False)\n",
    "    \n",
    "    # Mostrar en Python el número total de estaciones descargadas\n",
    "    total_estaciones = len(stations_info)\n",
    "    print(f\"Número total de estaciones descargadas: {total_estaciones}\")\n",
    "    \n",
    "    # Si quieres asegurarte de que se descargaron ambas listas de datos correctamente\n",
    "    print(f\"Número de estaciones en la información de estaciones: {len(stations_info)}\")\n",
    "    print(f\"Número de estaciones en el estado de estaciones: {len(stations_status)}\")\n",
    "\n",
    "else:\n",
    "    print(f\"Error en las solicitudes: {station_info_response.status_code}, {station_status_response.status_code}\")\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "id": "367fe9bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Datos exportados a C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx en la hoja 'BD2'\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from openpyxl import load_workbook\n",
    "\n",
    "# Definir el nombre del archivo\n",
    "file_name = 'C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx'\n",
    "\n",
    "# Crear el DataFrame (puedes usar tu propio DataFrame aquí)\n",
    "# df_data_countries = pd.DataFrame({\"Columna1\": [5, 6], \"Columna2\": [7, 8]})\n",
    "\n",
    "# Definir el nombre de la hoja donde vas a escribir\n",
    "sheet_name = 'BD2'\n",
    "\n",
    "# Cargar el archivo de Excel existente\n",
    "book = load_workbook(file_name)\n",
    "if sheet_name in book.sheetnames:\n",
    "    # Cargar los datos existentes de la hoja especificada en un DataFrame\n",
    "    existing_df = pd.read_excel(file_name, sheet_name=sheet_name)\n",
    "    \n",
    "    # Eliminar cualquier columna completamente vacía, para que no se agreguen columnas como Unnamed: 1, 2..\n",
    "    existing_df = existing_df.dropna(axis=1, how='all')\n",
    "\n",
    "    # Agregar los nuevos datos al final del DataFrame existente\n",
    "    updated_df = pd.concat([existing_df, df], ignore_index=True)\n",
    "    \n",
    "    # Guardar el DataFrame actualizado en la misma hoja, sobrescribiéndola\n",
    "    with pd.ExcelWriter(file_name, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:\n",
    "        updated_df.to_excel(writer, sheet_name=sheet_name, index=False)\n",
    "else:\n",
    "    # Si la hoja no existe, escribir el DataFrame desde cero\n",
    "    with pd.ExcelWriter(file_name, engine='openpyxl', mode='a') as writer:\n",
    "        df.to_excel(writer, sheet_name=sheet_name, index=False)\n",
    "\n",
    "print(f\"Datos exportados a {file_name} en la hoja '{sheet_name}'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "id": "9587de01",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "No axis named Comuna for object type DataFrame",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py:550\u001b[0m, in \u001b[0;36mNDFrame._get_axis_number\u001b[1;34m(cls, axis)\u001b[0m\n\u001b[0;32m    549\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 550\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mcls\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_AXIS_TO_AXIS_NUMBER\u001b[49m\u001b[43m[\u001b[49m\u001b[43maxis\u001b[49m\u001b[43m]\u001b[49m\n\u001b[0;32m    551\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Comuna'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[1;32mIn [318]\u001b[0m, in \u001b[0;36m<cell line: 15>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     12\u001b[0m df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_excel(file_name, sheet_name\u001b[38;5;241m=\u001b[39msheet_name)\n\u001b[0;32m     14\u001b[0m \u001b[38;5;66;03m# Calcular la varianza de las columnas \"Bikes\" y \"Free\"\u001b[39;00m\n\u001b[1;32m---> 15\u001b[0m varianza_bikes \u001b[38;5;241m=\u001b[39m \u001b[43mdf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgroupby\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mEstacion\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mComuna\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mBikes disponibles\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mvar()\n\u001b[0;32m     16\u001b[0m varianza_free \u001b[38;5;241m=\u001b[39m df\u001b[38;5;241m.\u001b[39mgroupby(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mEstacion\u001b[39m\u001b[38;5;124m'\u001b[39m)[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mFree\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mvar()\n\u001b[0;32m     18\u001b[0m \u001b[38;5;66;03m# Crear un nuevo DataFrame con las varianzas\u001b[39;00m\n",
      "File \u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:7707\u001b[0m, in \u001b[0;36mDataFrame.groupby\u001b[1;34m(self, by, axis, level, as_index, sort, group_keys, squeeze, observed, dropna)\u001b[0m\n\u001b[0;32m   7705\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m level \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m by \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   7706\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYou have to supply one of \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mby\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m and \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlevel\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m-> 7707\u001b[0m axis \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_axis_number\u001b[49m\u001b[43m(\u001b[49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   7709\u001b[0m \u001b[38;5;66;03m# https://github.com/python/mypy/issues/7642\u001b[39;00m\n\u001b[0;32m   7710\u001b[0m \u001b[38;5;66;03m# error: Argument \"squeeze\" to \"DataFrameGroupBy\" has incompatible type\u001b[39;00m\n\u001b[0;32m   7711\u001b[0m \u001b[38;5;66;03m# \"Union[bool, NoDefault]\"; expected \"bool\"\u001b[39;00m\n\u001b[0;32m   7712\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m DataFrameGroupBy(\n\u001b[0;32m   7713\u001b[0m     obj\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   7714\u001b[0m     keys\u001b[38;5;241m=\u001b[39mby,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   7722\u001b[0m     dropna\u001b[38;5;241m=\u001b[39mdropna,\n\u001b[0;32m   7723\u001b[0m )\n",
      "File \u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py:552\u001b[0m, in \u001b[0;36mNDFrame._get_axis_number\u001b[1;34m(cls, axis)\u001b[0m\n\u001b[0;32m    550\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mcls\u001b[39m\u001b[38;5;241m.\u001b[39m_AXIS_TO_AXIS_NUMBER[axis]\n\u001b[0;32m    551\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n\u001b[1;32m--> 552\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo axis named \u001b[39m\u001b[38;5;132;01m{\u001b[39;00maxis\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m for object type \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mcls\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mValueError\u001b[0m: No axis named Comuna for object type DataFrame"
     ]
    }
   ],
   "source": [
    "#Si necesito calcular las varianzas y asignarla a una hoja diferente CONSIDERANDO HORA DE CADA HOJA DESCARGADA\n",
    "import pandas as pd\n",
    "from openpyxl import load_workbook\n",
    "from datetime import date\n",
    "from datetime import datetime\n",
    "\n",
    "# Nombre del archivo y hoja original\n",
    "file_name = 'C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx'\n",
    "sheet_name = 'BD2'\n",
    "\n",
    "# Leer el archivo de Excel en un DataFrame\n",
    "df = pd.read_excel(file_name, sheet_name=sheet_name)\n",
    "\n",
    "# Calcular la varianza de las columnas \"Bikes\" y \"Free\"\n",
    "varianza_bikes = df.groupby('Estacion')['Bikes disponibles'].var()\n",
    "varianza_free = df.groupby('Estacion')['Free'].var()\n",
    "\n",
    "# Crear un nuevo DataFrame con las varianzas\n",
    "df_varianza = pd.DataFrame({\n",
    "    'Varianza_Bikes': varianza_bikes,\n",
    "    'Varianza_Free': varianza_free\n",
    "})\n",
    "\n",
    "# Restablecer el índice para que las estaciones sean una columna normal\n",
    "df_varianza.reset_index(inplace=True)\n",
    "\n",
    "# Cargar el libro de Excel existente\n",
    "book = load_workbook(file_name)\n",
    "\n",
    "# Generar un nombre único para la nueva hoja, usando la fecha y hora actual\n",
    "#AÑO-MES-DÍA_HORA-MINUTO-SEGUNDO\"\n",
    "#timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n",
    "timestamp = datetime.now().strftime('%H%M%S')\n",
    "new_sheet_name = f'VarBikyFree {timestamp}'\n",
    "\n",
    "# Escribir el resultado de las varianzas en una nueva hoja\n",
    "with pd.ExcelWriter(file_name, engine='openpyxl', mode='a') as writer:\n",
    "    df_varianza.to_excel(writer, sheet_name=new_sheet_name, index=False)\n",
    "\n",
    "print(f\"Varianza de 'Bikes' y 'Free' calculada y guardada en la nueva hoja '{new_sheet_name}'.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "id": "5ab94bb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Varianzas calculadas y guardadas en la nueva hoja 'Varianza_1805' en el archivo 'C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx'\n"
     ]
    }
   ],
   "source": [
    "#Calcula VARIANZA BIKES Y FREE PERO CONSIDERA TODO EL DATAFRAME da 1157 repetidas\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from openpyxl import load_workbook\n",
    "from datetime import datetime\n",
    "\n",
    "# Definir el nombre del archivo Excel que ya tiene tus datos\n",
    "file_name = 'C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx'\n",
    "\n",
    "# Especificar el nombre de la hoja de la que quieres calcular la varianza\n",
    "nombre_hoja_entrada = 'Base de datos fecha'\n",
    "\n",
    "# Leer solo la hoja específica del archivo Excel\n",
    "df = pd.read_excel(file_name, sheet_name=nombre_hoja_entrada)\n",
    "\n",
    "# Suponiendo que el archivo tiene las columnas 'Estación', 'Bikes Disponibles', 'Free Disponibles', etc.\n",
    "\n",
    "# Agrupar por estación para calcular la varianza de cada estación\n",
    "varianza_bikes = df.groupby('Estacion')['Bikes'].var().reset_index()\n",
    "varianza_free = df.groupby('Estacion')['Free'].var().reset_index()\n",
    "\n",
    "# Renombrar las columnas resultantes\n",
    "varianza_bikes.columns = ['Estacion', 'Varianza Bikes']\n",
    "varianza_free.columns = ['Estacion', 'Varianza Free']\n",
    "\n",
    "# Fusionar los resultados de las varianzas con el DataFrame original\n",
    "df_varianza = pd.merge(df, varianza_bikes, on='Estacion', how='left')\n",
    "\n",
    "df_varianza = pd.merge(df_varianza, varianza_free, on='Estacion', how='left')\n",
    "\n",
    "# Definir un nombre único para la nueva hoja de Excel, incluyendo la fecha y la hora para que cada vez que ejecutes, cree una hoja nueva\n",
    "hoja_nueva = f\"Varianza_{datetime.now().strftime('%H%')}\"\n",
    "\n",
    "#Abrir el archivo Excel existente y agregar la nueva hoja con los resultados\n",
    "book = load_workbook(file_name)\n",
    "\n",
    "#Guardar el DataFrame con las varianzas en una nueva hoja del Excel\n",
    "with pd.ExcelWriter(file_name, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:\n",
    "    df_varianza.to_excel(writer, sheet_name=hoja_nueva, index=False)\n",
    "\n",
    "print(f\"Varianzas calculadas y guardadas en la nueva hoja '{hoja_nueva}' en el archivo '{file_name}'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "id": "764f0560",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Varianzas calculadas y guardadas en la nueva hoja 'Varianza_1804' en el archivo 'C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx'\n"
     ]
    }
   ],
   "source": [
    "#Si necesito calcular las varianzas y asignarla a una hoja diferente CONSIDERANDO HORA DE CADA HOJA DESCARGADA este da var 668\n",
    "#fusion\n",
    "import pandas as pd\n",
    "from openpyxl import load_workbook\n",
    "from datetime import date\n",
    "from datetime import datetime\n",
    "\n",
    "# Nombre del archivo y hoja original\n",
    "file_name = 'C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx'\n",
    "sheet_name = 'BD2'\n",
    "\n",
    "# Leer el archivo de Excel en un DataFrame\n",
    "df = pd.read_excel(file_name, sheet_name=sheet_name)\n",
    "\n",
    "# Calcular la varianza de las columnas \"Bikes\" y \"Free\"\n",
    "varianza_bikes = df.groupby('Estacion')['Bikes disponibles'].var()\n",
    "varianza_free = df.groupby('Estacion')['Free'].var()\n",
    "\n",
    "# Crear un nuevo DataFrame con las varianzas\n",
    "df_varianza = pd.DataFrame({\n",
    "    'Varianza_Bikes': varianza_bikes,\n",
    "    'Varianza_Free': varianza_free\n",
    "})\n",
    "\n",
    "# Restablecer el índice para que las estaciones sean una columna normal\n",
    "df_varianza.reset_index(inplace=True)\n",
    "\n",
    "#nuevo\n",
    "# Renombrar las columnas resultantes\n",
    "varianza_bikes.columns = ['Estacion', 'Varianza Bikes']\n",
    "varianza_free.columns = ['Estacion', 'Varianza Free']\n",
    "\n",
    "# Fusionar los resultados de las varianzas con el DataFrame original\n",
    "df_varianza = pd.merge(df, varianza_bikes, on='Estacion', how='left')\n",
    "\n",
    "df_varianza = pd.merge(df_varianza, varianza_free, on='Estacion', how='left')\n",
    "\n",
    "# Definir un nombre único para la nueva hoja de Excel, incluyendo la fecha y la hora para que cada vez que ejecutes, cree una hoja nueva\n",
    "hoja_nueva = f\"Varianza_{datetime.now().strftime('%H%M')}\"\n",
    "\n",
    "#Abrir el archivo Excel existente y agregar la nueva hoja con los resultados\n",
    "book = load_workbook(file_name)\n",
    "\n",
    "#Guardar el DataFrame con las varianzas en una nueva hoja del Excel\n",
    "with pd.ExcelWriter(file_name, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:\n",
    "    df_varianza.to_excel(writer, sheet_name=hoja_nueva, index=False)\n",
    "\n",
    "print(f\"Varianzas calculadas y guardadas en la nueva hoja '{hoja_nueva}' en el archivo '{file_name}'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "id": "9b187ace",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Varianza de 'Bikes' y 'Free' calculada y guardada en la nueva hoja 'VarBikyFree 181400'.\n"
     ]
    }
   ],
   "source": [
    "#con esto se crea nueva hoja para calcular estacion, var BIKES Y FRE y la COMUNA\n",
    "import pandas as pd\n",
    "from openpyxl import load_workbook\n",
    "from datetime import datetime\n",
    "\n",
    "# Nombre del archivo y hoja original\n",
    "file_name = 'C:/Users/VALE/Desktop/Tesis/Tesis Pedro Palominos/Código python/Ejemplo228.xlsx'\n",
    "sheet_name = 'BD2'\n",
    "\n",
    "# Leer el archivo de Excel en un DataFrame\n",
    "df = pd.read_excel(file_name, sheet_name=sheet_name)\n",
    "\n",
    "# Calcular la varianza de las columnas \"Bikes\" y \"Free\"\n",
    "varianza_bikes = df.groupby('Estacion')['Bikes disponibles'].var().reset_index(name='Varianza_Bikes')\n",
    "varianza_free = df.groupby('Estacion')['Free'].var().reset_index(name='Varianza_Free')\n",
    "\n",
    "# Hacer merge para incluir la columna 'Comuna' correspondiente\n",
    "df_varianza = pd.merge(varianza_bikes, varianza_free, on='Estacion')\n",
    "\n",
    "# Unir con el DataFrame original para obtener la columna 'Comuna'\n",
    "df_varianza = df_varianza.merge(df[['Estacion', 'Comuna']].drop_duplicates(), on='Estacion', how='left')\n",
    "\n",
    "# Cargar el libro de Excel existente\n",
    "book = load_workbook(file_name)\n",
    "\n",
    "# Generar un nombre único para la nueva hoja, usando la fecha y hora actual\n",
    "timestamp = datetime.now().strftime('%H%M%S')\n",
    "new_sheet_name = f'VarBikyFree {timestamp}'\n",
    "\n",
    "# Escribir el resultado de las varianzas en una nueva hoja\n",
    "with pd.ExcelWriter(file_name, engine='openpyxl', mode='a') as writer:\n",
    "    df_varianza.to_excel(writer, sheet_name=new_sheet_name, index=False)\n",
    "\n",
    "print(f\"Varianza de 'Bikes' y 'Free' calculada y guardada en la nueva hoja '{new_sheet_name}'.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b572314b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
